# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/testing.md:1
#, markdown-text, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/testing.md:5
#, markdown-text
msgid ""
"Deno has a built-in test runner that you can use for testing JavaScript or "
"TypeScript code."
msgstr ""

#. type: Title ##
#: docs/testing.md:6
#, markdown-text, no-wrap
msgid "Writing tests"
msgstr ""

#. type: Plain text
#: docs/testing.md:10
#, markdown-text
msgid ""
"To define a test you need to call `Deno.test` with a name and function to be "
"tested. There are two styles you can use."
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:11
#, no-wrap
msgid ""
"// Simple name and function, compact form, but not configurable\n"
"Deno.test(\"hello world #1\", () => {\n"
"  const x = 1 + 2;\n"
"  assertEquals(x, 3);\n"
"});\n"
"\n"
"// Fully fledged test definition, longer form, but configurable (see "
"below)\n"
"Deno.test({\n"
"  name: \"hello world #2\",\n"
"  fn: () => {\n"
"    const x = 1 + 2;\n"
"    assertEquals(x, 3);\n"
"  },\n"
"});\n"
msgstr ""

#. type: Title ##
#: docs/testing.md:28
#, markdown-text, no-wrap
msgid "Assertions"
msgstr ""

#. type: Plain text
#: docs/testing.md:32
#, markdown-text
msgid ""
"There are some useful assertion utilities at "
"https://deno.land/std@$STD_VERSION/testing#usage to make testing easier:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:33
#, no-wrap
msgid ""
"import {\n"
"  assertArrayIncludes,\n"
"  assertEquals,\n"
"} from \"https://deno.land/std@$STD_VERSION/testing/asserts.ts\";\n"
"\n"
"Deno.test(\"hello world\", () => {\n"
"  const x = 1 + 2;\n"
"  assertEquals(x, 3);\n"
"  assertArrayIncludes([1, 2, 3, 4, 5, 6], [3], \"Expected 3 to be in the "
"array\");\n"
"});\n"
msgstr ""

#. type: Title ###
#: docs/testing.md:46
#, markdown-text, no-wrap
msgid "Async functions"
msgstr ""

#. type: Plain text
#: docs/testing.md:50
#, markdown-text
msgid ""
"You can also test asynchronous code by passing a test function that returns "
"a promise. For this you can use the `async` keyword when defining a "
"function:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:51
#, no-wrap
msgid ""
"import { delay } from "
"\"https://deno.land/std@$STD_VERSION/async/delay.ts\";\n"
"\n"
"Deno.test(\"async hello world\", async () => {\n"
"  const x = 1 + 2;\n"
"\n"
"  // await some async task\n"
"  await delay(100);\n"
"\n"
"  if (x !== 3) {\n"
"    throw Error(\"x should be equal to 3\");\n"
"  }\n"
"});\n"
msgstr ""

#. type: Title ###
#: docs/testing.md:66
#, markdown-text, no-wrap
msgid "Resource and async op sanitizers"
msgstr ""

#. type: Plain text
#: docs/testing.md:71
#, markdown-text
msgid ""
"Certain actions in Deno create resources in the resource table ([learn more "
"here](./contributing/architecture.md)). These resources should be closed "
"after you are done using them."
msgstr ""

#. type: Plain text
#: docs/testing.md:76
#, markdown-text
msgid ""
"For each test definition, the test runner checks that all resources created "
"in this test have been closed. This is to prevent resource 'leaks'. This is "
"enabled by default for all tests, but can be disabled by setting the "
"`sanitizeResources` boolean to false in the test definition."
msgstr ""

#. type: Plain text
#: docs/testing.md:81
#, markdown-text
msgid ""
"The same is true for async operation like interacting with the "
"filesystem. The test runner checks that each operation you start in the test "
"is completed before the end of the test. This is enabled by default for all "
"tests, but can be disabled by setting the `sanitizeOps` boolean to false in "
"the test definition."
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:82
#, no-wrap
msgid ""
"Deno.test({\n"
"  name: \"leaky test\",\n"
"  fn() {\n"
"    Deno.open(\"hello.txt\");\n"
"  },\n"
"  sanitizeResources: false,\n"
"  sanitizeOps: false,\n"
"});\n"
msgstr ""

#. type: Title ##
#: docs/testing.md:93
#, markdown-text, no-wrap
msgid "Running tests"
msgstr ""

#. type: Plain text
#: docs/testing.md:100
#, markdown-text
msgid ""
"To run the test, call `deno test` with the file that contains your test "
"function. You can also omit the file name, in which case all tests in the "
"current directory (recursively) that match the glob "
"`{*_,*.,}test.{js,mjs,ts,jsx,tsx}` will be run. If you pass a directory, all "
"files in the directory that match this glob will be run."
msgstr ""

#. type: Fenced code block (shell)
#: docs/testing.md:101
#, no-wrap
msgid ""
"# Run all tests in the current directory and all sub-directories\n"
"deno test\n"
"\n"
"# Run all tests in the util directory\n"
"deno test util/\n"
"\n"
"# Run just my_test.ts\n"
"deno test my_test.ts\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:115
#, markdown-text
msgid ""
"`deno test` uses the same permission model as `deno run` and therefore will "
"require, for example, `--allow-write` to write to the file system during "
"testing."
msgstr ""

#. type: Plain text
#: docs/testing.md:118
#, markdown-text
msgid ""
"To see all runtime options with `deno test`, you can reference the command "
"line help:"
msgstr ""

#. type: Fenced code block (shell)
#: docs/testing.md:119
#, no-wrap
msgid "deno help test\n"
msgstr ""

#. type: Title ##
#: docs/testing.md:123
#, markdown-text, no-wrap
msgid "Filtering"
msgstr ""

#. type: Plain text
#: docs/testing.md:126
#, markdown-text
msgid "There are a number of options to filter the tests you are running."
msgstr ""

#. type: Title ###
#: docs/testing.md:127
#, markdown-text, no-wrap
msgid "Command line filtering"
msgstr ""

#. type: Plain text
#: docs/testing.md:131
#, markdown-text
msgid ""
"Tests can be run individually or in groups using the command line `--filter` "
"option."
msgstr ""

#. type: Plain text
#: docs/testing.md:133
#, markdown-text
msgid "The filter flags accept a string or a pattern as value."
msgstr ""

#. type: Plain text
#: docs/testing.md:135
#, markdown-text
msgid "Assuming the following tests:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:136
#, no-wrap
msgid ""
"Deno.test({ name: \"my-test\", fn: myTest });\n"
"Deno.test({ name: \"test-1\", fn: test1 });\n"
"Deno.test({ name: \"test2\", fn: test2 });\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:144
#, markdown-text
msgid ""
"This command will run all of these tests because they all contain the word "
"\"test\"."
msgstr ""

#. type: Fenced code block (shell)
#: docs/testing.md:145
#, no-wrap
msgid "deno test --filter \"test\" tests/\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:151
#, markdown-text
msgid ""
"On the flip side, the following command uses a pattern and will run the "
"second and third tests."
msgstr ""

#. type: Fenced code block (shell)
#: docs/testing.md:152
#, no-wrap
msgid "deno test --filter \"/test-*\\d/\" tests/\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:158
#, markdown-text
msgid ""
"_To let Deno know that you want to use a pattern, wrap your filter with "
"forward-slashes like the JavaScript syntactic sugar for a REGEX._"
msgstr ""

#. type: Title ###
#: docs/testing.md:159
#, markdown-text, no-wrap
msgid "Test definition filtering"
msgstr ""

#. type: Plain text
#: docs/testing.md:162
#, markdown-text
msgid "Within the tests themselves, you have two options for filtering."
msgstr ""

#. type: Title ####
#: docs/testing.md:163
#, markdown-text, no-wrap
msgid "Filtering out (Ignoring these tests)"
msgstr ""

#. type: Plain text
#: docs/testing.md:168
#, markdown-text
msgid ""
"Sometimes you want to ignore tests based on some sort of condition (for "
"example you only want a test to run on Windows). For this you can use the "
"`ignore` boolean in the test definition. If it is set to true the test will "
"be skipped."
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:169
#, no-wrap
msgid ""
"Deno.test({\n"
"  name: \"do macOS feature\",\n"
"  ignore: Deno.build.os !== \"darwin\",\n"
"  fn() {\n"
"    doMacOSFeature();\n"
"  },\n"
"});\n"
msgstr ""

#. type: Title ####
#: docs/testing.md:179
#, markdown-text, no-wrap
msgid "Filtering in (Only run these tests)"
msgstr ""

#. type: Plain text
#: docs/testing.md:188
#, markdown-text
msgid ""
"Sometimes you may be in the middle of a problem within a large test class "
"and you would like to focus on just that test and ignore the rest for "
"now. For this you can use the `only` option to tell the test framework to "
"only run tests with this set to true. Multiple tests can set this "
"option. While the test run will report on the success or failure of each "
"test, the overall test run will always fail if any test is flagged with "
"`only`, as this is a temporary measure only which disables nearly all of "
"your tests."
msgstr ""

#. type: Fenced code block (ts)
#: docs/testing.md:189
#, no-wrap
msgid ""
"Deno.test({\n"
"  name: \"Focus on this test only\",\n"
"  only: true,\n"
"  fn() {\n"
"    testComplicatedStuff();\n"
"  },\n"
"});\n"
msgstr ""

#. type: Title ##
#: docs/testing.md:199
#, markdown-text, no-wrap
msgid "Failing fast"
msgstr ""

#. type: Plain text
#: docs/testing.md:203
#, markdown-text
msgid ""
"If you have a long running test suite and wish for it to stop on the first "
"failure, you can specify the `--failfast` flag when running the suite."
msgstr ""

#. type: Fenced code block (shell)
#: docs/testing.md:204
#, no-wrap
msgid "deno test --failfast\n"
msgstr ""

#. type: Title ##
#: docs/testing.md:208
#, markdown-text, no-wrap
msgid "Test coverage"
msgstr ""

#. type: Plain text
#: docs/testing.md:214
#, markdown-text
msgid ""
"Deno will automatically determine test coverage for your code if you specify "
"the `--coverage` flag when starting `deno test`. Coverage is determined on a "
"line by line basis for modules that share the parent directory with at-least "
"one test module that is being executed."
msgstr ""

#. type: Plain text
#: docs/testing.md:217
#, markdown-text
msgid ""
"This coverage information is acquired directly from the JavaScript engine "
"(V8).  Because of this, the coverage reports are very accurate."
msgstr ""

#. type: Plain text
#: docs/testing.md:220
#, markdown-text
msgid ""
"When all tests are done running a summary of coverage per file is printed to "
"stdout. In the future there will be support for `lcov` output too."
msgstr ""

#. type: Fenced code block
#: docs/testing.md:221
#, no-wrap
msgid ""
"$ git clone git@github.com:denosaurs/deno_brotli.git && cd deno_brotli\n"
"$ deno test --coverage --unstable\n"
"Debugger listening on "
"ws://127.0.0.1:9229/ws/5a593019-d185-478b-a928-ebc33e5834be\n"
"Check file:///home/deno/deno_brotli/$deno$test.ts\n"
"running 2 tests\n"
"test compress ... ok (26ms)\n"
"test decompress ... ok (13ms)\n"
"\n"
"test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out "
"(40ms)\n"
"\n"
"test coverage:\n"
"file:///home/deno/deno_brotli/mod.ts 100.000%\n"
"file:///home/deno/deno_brotli/wasm.js 100.000%\n"
msgstr ""
