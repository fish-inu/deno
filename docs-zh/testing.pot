# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-23 14:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: docs/testing.md:2
msgid "# Testing"
msgstr ""

#. type: Plain text
#: docs/testing.md:5
msgid ""
"Deno has a built-in test runner that you can use for testing JavaScript or "
"TypeScript code."
msgstr ""

#. type: Plain text
#: docs/testing.md:7
msgid "## Writing tests"
msgstr ""

#. type: Plain text
#: docs/testing.md:10
msgid ""
"To define a test you need to call `Deno.test` with a name and function to be "
"tested. There are two styles you can use."
msgstr ""

#. type: Plain text
#: docs/testing.md:17
#, no-wrap
msgid ""
"```ts\n"
"// Simple name and function, compact form, but not configurable\n"
"Deno.test(\"hello world #1\", () => {\n"
"  const x = 1 + 2;\n"
"  assertEquals(x, 3);\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:27
#, no-wrap
msgid ""
"// Fully fledged test definition, longer form, but configurable (see "
"below)\n"
"Deno.test({\n"
"  name: \"hello world #2\",\n"
"  fn: () => {\n"
"    const x = 1 + 2;\n"
"    assertEquals(x, 3);\n"
"  },\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:29
msgid "## Assertions"
msgstr ""

#. type: Plain text
#: docs/testing.md:32
msgid ""
"There are some useful assertion utilities at "
"https://deno.land/std@$STD_VERSION/testing#usage to make testing easier:"
msgstr ""

#. type: Plain text
#: docs/testing.md:38
#, no-wrap
msgid ""
"```ts\n"
"import {\n"
"  assertArrayIncludes,\n"
"  assertEquals,\n"
"} from \"https://deno.land/std@$STD_VERSION/testing/asserts.ts\";\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:45
#, no-wrap
msgid ""
"Deno.test(\"hello world\", () => {\n"
"  const x = 1 + 2;\n"
"  assertEquals(x, 3);\n"
"  assertArrayIncludes([1, 2, 3, 4, 5, 6], [3], \"Expected 3 to be in the "
"array\");\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:47
msgid "### Async functions"
msgstr ""

#. type: Plain text
#: docs/testing.md:50
msgid ""
"You can also test asynchronous code by passing a test function that returns "
"a promise. For this you can use the `async` keyword when defining a "
"function:"
msgstr ""

#. type: Plain text
#: docs/testing.md:53
msgid ""
"```ts import { delay } from "
"\"https://deno.land/std@$STD_VERSION/async/delay.ts\";"
msgstr ""

#. type: Plain text
#: docs/testing.md:56
#, no-wrap
msgid ""
"Deno.test(\"async hello world\", async () => {\n"
"  const x = 1 + 2;\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:59
#, no-wrap
msgid ""
"  // await some async task\n"
"  await delay(100);\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:65
#, no-wrap
msgid ""
"  if (x !== 3) {\n"
"    throw Error(\"x should be equal to 3\");\n"
"  }\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:67
msgid "### Resource and async op sanitizers"
msgstr ""

#. type: Plain text
#: docs/testing.md:71
msgid ""
"Certain actions in Deno create resources in the resource table ([learn more "
"here](./contributing/architecture.md)). These resources should be closed "
"after you are done using them."
msgstr ""

#. type: Plain text
#: docs/testing.md:76
msgid ""
"For each test definition, the test runner checks that all resources created "
"in this test have been closed. This is to prevent resource 'leaks'. This is "
"enabled by default for all tests, but can be disabled by setting the "
"`sanitizeResources` boolean to false in the test definition."
msgstr ""

#. type: Plain text
#: docs/testing.md:81
msgid ""
"The same is true for async operation like interacting with the "
"filesystem. The test runner checks that each operation you start in the test "
"is completed before the end of the test. This is enabled by default for all "
"tests, but can be disabled by setting the `sanitizeOps` boolean to false in "
"the test definition."
msgstr ""

#. type: Plain text
#: docs/testing.md:92
#, no-wrap
msgid ""
"```ts\n"
"Deno.test({\n"
"  name: \"leaky test\",\n"
"  fn() {\n"
"    Deno.open(\"hello.txt\");\n"
"  },\n"
"  sanitizeResources: false,\n"
"  sanitizeOps: false,\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:94
msgid "## Running tests"
msgstr ""

#. type: Plain text
#: docs/testing.md:100
msgid ""
"To run the test, call `deno test` with the file that contains your test "
"function. You can also omit the file name, in which case all tests in the "
"current directory (recursively) that match the glob "
"`{*_,*.,}test.{js,mjs,ts,jsx,tsx}` will be run. If you pass a directory, all "
"files in the directory that match this glob will be run."
msgstr ""

#. type: Plain text
#: docs/testing.md:104
msgid ""
"```shell # Run all tests in the current directory and all sub-directories "
"deno test"
msgstr ""

#. type: Plain text
#: docs/testing.md:107
msgid "# Run all tests in the util directory deno test util/"
msgstr ""

#. type: Plain text
#: docs/testing.md:111
msgid "# Run just my_test.ts deno test my_test.ts ```"
msgstr ""

#. type: Plain text
#: docs/testing.md:115
msgid ""
"`deno test` uses the same permission model as `deno run` and therefore will "
"require, for example, `--allow-write` to write to the file system during "
"testing."
msgstr ""

#. type: Plain text
#: docs/testing.md:118
msgid ""
"To see all runtime options with `deno test`, you can reference the command "
"line help:"
msgstr ""

#. type: Plain text
#: docs/testing.md:122
msgid "```shell deno help test ```"
msgstr ""

#. type: Plain text
#: docs/testing.md:124
msgid "## Filtering"
msgstr ""

#. type: Plain text
#: docs/testing.md:126
msgid "There are a number of options to filter the tests you are running."
msgstr ""

#. type: Plain text
#: docs/testing.md:128
msgid "### Command line filtering"
msgstr ""

#. type: Plain text
#: docs/testing.md:131
msgid ""
"Tests can be run individually or in groups using the command line `--filter` "
"option."
msgstr ""

#. type: Plain text
#: docs/testing.md:133
msgid "The filter flags accept a string or a pattern as value."
msgstr ""

#. type: Plain text
#: docs/testing.md:135
msgid "Assuming the following tests:"
msgstr ""

#. type: Plain text
#: docs/testing.md:141
msgid ""
"```ts Deno.test({ name: \"my-test\", fn: myTest }); Deno.test({ name: "
"\"test-1\", fn: test1 }); Deno.test({ name: \"test2\", fn: test2 }); ```"
msgstr ""

#. type: Plain text
#: docs/testing.md:144
msgid ""
"This command will run all of these tests because they all contain the word "
"\"test\"."
msgstr ""

#. type: Plain text
#: docs/testing.md:148
msgid "```shell deno test --filter \"test\" tests/ ```"
msgstr ""

#. type: Plain text
#: docs/testing.md:151
msgid ""
"On the flip side, the following command uses a pattern and will run the "
"second and third tests."
msgstr ""

#. type: Plain text
#: docs/testing.md:155
msgid "```shell deno test --filter \"/test-*\\d/\" tests/ ```"
msgstr ""

#. type: Plain text
#: docs/testing.md:158
msgid ""
"_To let Deno know that you want to use a pattern, wrap your filter with "
"forward-slashes like the JavaScript syntactic sugar for a REGEX._"
msgstr ""

#. type: Plain text
#: docs/testing.md:160
msgid "### Test definition filtering"
msgstr ""

#. type: Plain text
#: docs/testing.md:162
msgid "Within the tests themselves, you have two options for filtering."
msgstr ""

#. type: Plain text
#: docs/testing.md:164
msgid "#### Filtering out (Ignoring these tests)"
msgstr ""

#. type: Plain text
#: docs/testing.md:168
msgid ""
"Sometimes you want to ignore tests based on some sort of condition (for "
"example you only want a test to run on Windows). For this you can use the "
"`ignore` boolean in the test definition. If it is set to true the test will "
"be skipped."
msgstr ""

#. type: Plain text
#: docs/testing.md:178
#, no-wrap
msgid ""
"```ts\n"
"Deno.test({\n"
"  name: \"do macOS feature\",\n"
"  ignore: Deno.build.os !== \"darwin\",\n"
"  fn() {\n"
"    doMacOSFeature();\n"
"  },\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:180
msgid "#### Filtering in (Only run these tests)"
msgstr ""

#. type: Plain text
#: docs/testing.md:188
msgid ""
"Sometimes you may be in the middle of a problem within a large test class "
"and you would like to focus on just that test and ignore the rest for "
"now. For this you can use the `only` option to tell the test framework to "
"only run tests with this set to true. Multiple tests can set this "
"option. While the test run will report on the success or failure of each "
"test, the overall test run will always fail if any test is flagged with "
"`only`, as this is a temporary measure only which disables nearly all of "
"your tests."
msgstr ""

#. type: Plain text
#: docs/testing.md:198
#, no-wrap
msgid ""
"```ts\n"
"Deno.test({\n"
"  name: \"Focus on this test only\",\n"
"  only: true,\n"
"  fn() {\n"
"    testComplicatedStuff();\n"
"  },\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/testing.md:200
msgid "## Failing fast"
msgstr ""

#. type: Plain text
#: docs/testing.md:203
msgid ""
"If you have a long running test suite and wish for it to stop on the first "
"failure, you can specify the `--failfast` flag when running the suite."
msgstr ""

#. type: Plain text
#: docs/testing.md:207
msgid "```shell deno test --failfast ```"
msgstr ""

#. type: Plain text
#: docs/testing.md:209
msgid "## Test coverage"
msgstr ""

#. type: Plain text
#: docs/testing.md:214
msgid ""
"Deno will automatically determine test coverage for your code if you specify "
"the `--coverage` flag when starting `deno test`. Coverage is determined on a "
"line by line basis for modules that share the parent directory with at-least "
"one test module that is being executed."
msgstr ""

#. type: Plain text
#: docs/testing.md:217
msgid ""
"This coverage information is acquired directly from the JavaScript engine "
"(V8).  Because of this, the coverage reports are very accurate."
msgstr ""

#. type: Plain text
#: docs/testing.md:220
msgid ""
"When all tests are done running a summary of coverage per file is printed to "
"stdout. In the future there will be support for `lcov` output too."
msgstr ""

#. type: Plain text
#: docs/testing.md:229
msgid ""
"``` $ git clone git@github.com:denosaurs/deno_brotli.git && cd deno_brotli $ "
"deno test --coverage --unstable Debugger listening on "
"ws://127.0.0.1:9229/ws/5a593019-d185-478b-a928-ebc33e5834be Check "
"file:///home/deno/deno_brotli/$deno$test.ts running 2 tests test compress "
"... ok (26ms)  test decompress ... ok (13ms)"
msgstr ""

#. type: Plain text
#: docs/testing.md:231
msgid ""
"test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out "
"(40ms)"
msgstr ""

#. type: Plain text
#: docs/testing.md:235
msgid ""
"test coverage: file:///home/deno/deno_brotli/mod.ts 100.000% "
"file:///home/deno/deno_brotli/wasm.js 100.000% ```"
msgstr ""
