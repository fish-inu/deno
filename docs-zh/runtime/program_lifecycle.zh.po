# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ##
#: docs/runtime/program_lifecycle.md:1
#, no-wrap
msgid "Program lifecycle"
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:5
msgid ""
"Deno supports browser compatible lifecycle events: `load` and `unload`. You "
"can use these events to provide setup and cleanup code in your program."
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:8
msgid ""
"Listeners for `load` events can be asynchronous and will be awaited. "
"Listeners for `unload` events need to be synchronous. Both events cannot be "
"cancelled."
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:10
msgid "Example:"
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:12
#, no-wrap
msgid "**main.ts**\n"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/program_lifecycle.md:13
#, no-wrap
msgid ""
"import \"./imported.ts\";\n"
"\n"
"const handler = (e: Event): void => {\n"
"  console.log(`got ${e.type} event in event handler (main)`);\n"
"};\n"
"\n"
"window.addEventListener(\"load\", handler);\n"
"\n"
"window.addEventListener(\"unload\", handler);\n"
"\n"
"window.onload = (e: Event): void => {\n"
"  console.log(`got ${e.type} event in onload function (main)`);\n"
"};\n"
"\n"
"window.onunload = (e: Event): void => {\n"
"  console.log(`got ${e.type} event in onunload function (main)`);\n"
"};\n"
"\n"
"console.log(\"log from main script\");\n"
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:36
#, no-wrap
msgid "**imported.ts**\n"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/program_lifecycle.md:37
#, no-wrap
msgid ""
"const handler = (e: Event): void => {\n"
"  console.log(`got ${e.type} event in event handler (imported)`);\n"
"};\n"
"\n"
"window.addEventListener(\"load\", handler);\n"
"window.addEventListener(\"unload\", handler);\n"
"\n"
"window.onload = (e: Event): void => {\n"
"  console.log(`got ${e.type} event in onload function (imported)`);\n"
"};\n"
"\n"
"window.onunload = (e: Event): void => {\n"
"  console.log(`got ${e.type} event in onunload function (imported)`);\n"
"};\n"
"\n"
"console.log(\"log from imported script\");\n"
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:59
msgid ""
"Note that you can use both `window.addEventListener` and `window.onload`/"
"`window.onunload` to define handlers for events. There is a major difference "
"between them, let's run the example:"
msgstr ""

#. type: Fenced code block (shell)
#: docs/runtime/program_lifecycle.md:60
#, no-wrap
msgid ""
"$ deno run main.ts\n"
"log from imported script\n"
"log from main script\n"
"got load event in onload function (main)\n"
"got load event in event handler (imported)\n"
"got load event in event handler (main)\n"
"got unload event in onunload function (main)\n"
"got unload event in event handler (imported)\n"
"got unload event in event handler (main)\n"
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:75
msgid ""
"All listeners added using `window.addEventListener` were run, but `window."
"onload` and `window.onunload` defined in `main.ts` overrode handlers defined "
"in `imported.ts`."
msgstr ""

#. type: Plain text
#: docs/runtime/program_lifecycle.md:78
msgid ""
"In other words, you can register multiple `window.addEventListener` `\"load"
"\"` or `\"unload\"` events, but only the last loaded `window.onload` or "
"`window.onunload` events will be executed."
msgstr ""
