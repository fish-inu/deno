# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-19 16:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: docs/runtime/compiler_apis.md:2
msgid "## Compiler APIs"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:5
msgid ""
"> This API is unstable. Learn more about > [unstable "
"features](../runtime/stability.md)."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:8
msgid ""
"Deno supports runtime access to the built-in TypeScript compiler. There are "
"three methods in the `Deno` namespace that provide this access."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:10
msgid "### `Deno.compile()`"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:26
msgid ""
"This works similar to `deno cache` in that it can fetch and cache the code, "
"compile it, but not run it. It takes up to three arguments, the `rootName`, "
"optionally `sources`, and optionally `options`. The `rootName` is the root "
"module which will be used to generate the resulting program. This is like "
"the module name you would pass on the command line in `deno run --reload "
"example.ts`. The `sources` is a hash where the key is the fully qualified "
"module name, and the value is the text source of the module. If `sources` is "
"passed, Deno will resolve all the modules from within that hash and not "
"attempt to resolve them outside of Deno. If `sources` are not provided, Deno "
"will resolve modules as if the root module had been passed on the command "
"line.  Deno will also cache any of these resources. All resolved resources "
"are treated as dynamic imports and require read or net permissions depending "
"on if they're local or remote. The `options` argument is a set of options of "
"type `Deno.CompilerOptions`, which is a subset of the TypeScript compiler "
"options containing the ones supported by Deno."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:30
msgid ""
"The method resolves with a tuple. The first argument contains any "
"diagnostics (syntax or type errors) related to the code. The second argument "
"is a map where the keys are the output filenames and the values are the "
"content."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:32 docs/runtime/compiler_apis.md:79
msgid "An example of providing sources:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:38
#, no-wrap
msgid ""
"```ts\n"
"const [diagnostics, emitMap] = await Deno.compile(\"/foo.ts\", {\n"
"  \"/foo.ts\": `import * as bar from "
"\"./bar.ts\";\\nconsole.log(bar);\\n`,\n"
"  \"/bar.ts\": `export const bar = \"bar\";\\n`,\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:42
msgid ""
"assert(diagnostics == null); // ensuring no diagnostics are returned "
"console.log(emitMap); ```"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:45
msgid ""
"We would expect map to contain 4 \"files\", named `/foo.js.map`, `/foo.js`, "
"`/bar.js.map`, and `/bar.js`."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:48 docs/runtime/compiler_apis.md:95
msgid ""
"When not supplying resources, you can use local or remote modules, just like "
"you could do on the command line. So you could do something like this:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:54
#, no-wrap
msgid ""
"```ts\n"
"const [diagnostics, emitMap] = await Deno.compile(\n"
"  \"https://deno.land/std@$STD_VERSION/examples/welcome.ts\",\n"
");\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:56
msgid "In this case `emitMap` will contain a `console.log()` statement."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:58
msgid "### `Deno.bundle()`"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:77
msgid ""
"This works a lot like `deno bundle` does on the command line. It is also "
"like `Deno.compile()`, except instead of returning a map of files, it "
"returns a single string, which is a self-contained JavaScript ES module "
"which will include all of the code that was provided or resolved as well as "
"exports of all the exports of the root module that was provided. It takes up "
"to three arguments, the `rootName`, optionally `sources`, and optionally "
"`options`. The `rootName` is the root module which will be used to generate "
"the resulting program. This is like module name you would pass on the "
"command line in `deno bundle example.ts`.  The `sources` is a hash where the "
"key is the fully qualified module name, and the value is the text source of "
"the module. If `sources` is passed, Deno will resolve all the modules from "
"within that hash and not attempt to resolve them outside of Deno. If "
"`sources` are not provided, Deno will resolve modules as if the root module "
"had been passed on the command line. All resolved resources are treated as "
"dynamic imports and require read or net permissions depending if they're "
"local or remote. Deno will also cache any of these resources. The `options` "
"argument is a set of options of type `Deno.CompilerOptions`, which is a "
"subset of the TypeScript compiler options containing the ones supported by "
"Deno."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:85
#, no-wrap
msgid ""
"```ts\n"
"const [diagnostics, emit] = await Deno.bundle(\"/foo.ts\", {\n"
"  \"/foo.ts\": `import * as bar from "
"\"./bar.ts\";\\nconsole.log(bar);\\n`,\n"
"  \"/bar.ts\": `export const bar = \"bar\";\\n`,\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:89
msgid ""
"assert(diagnostics == null); // ensuring no diagnostics are returned "
"console.log(emit); ```"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:92
msgid ""
"We would expect `emit` to be the text for an ES module, which would contain "
"the output sources for both modules."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:101
#, no-wrap
msgid ""
"```ts\n"
"const [diagnostics, emit] = await Deno.bundle(\n"
"  \"https://deno.land/std@$STD_VERSION/http/server.ts\",\n"
");\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:104
msgid ""
"In this case `emit` will be a self contained JavaScript ES module with all "
"of its dependencies resolved and exporting the same exports as the source "
"module."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:106
msgid "### `Deno.transpileOnly()`"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:118
msgid ""
"This is based off of the TypeScript function `transpileModule()`. All this "
"does is \"erase\" any types from the modules and emit JavaScript. There is "
"no type checking and no resolution of dependencies. It accepts up to two "
"arguments, the first is a hash where the key is the module name and the "
"value is the content.  The only purpose of the module name is when putting "
"information into a source map, of what the source file name was. The second "
"argument contains optional `options` of the type `Deno.CompilerOptions`. The "
"function resolves with a map where the key is the source module name "
"supplied, and the value is an object with a property of `source` and "
"optionally `map`. The first is the output contents of the module. The `map` "
"property is the source map. Source maps are provided by default, but can be "
"turned off via the `options` argument."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:120
msgid "An example:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:125
#, no-wrap
msgid ""
"```ts\n"
"const result = await Deno.transpileOnly({\n"
"  \"/foo.ts\": `enum Foo { Foo, Bar, Baz };\\n`,\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:129
msgid ""
"console.log(result[\"/foo.ts\"].source); "
"console.log(result[\"/foo.ts\"].map); ```"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:132
msgid ""
"We would expect the `enum` would be rewritten to an IIFE which constructs "
"the enumerable, and the map to be defined."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:134
msgid "### Referencing TypeScript library files"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:139
msgid ""
"When you use `deno run`, or other Deno commands which type check TypeScript, "
"that code is evaluated against custom libraries which describe the "
"environment that Deno supports. By default, the compiler runtime APIs which "
"type check TypeScript also use these libraries (`Deno.compile()` and "
"`Deno.bundle()`)."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:145
msgid ""
"But if you want to compile or bundle TypeScript for some other runtime, you "
"may want to override the default libraries. To do this, the runtime APIs "
"support the `lib` property in the compiler options. For example, if you had "
"TypeScript code that is destined for the browser, you would want to use the "
"TypeScript `\"dom\"` library:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:157
#, no-wrap
msgid ""
"```ts\n"
"const [errors, emitted] = await Deno.compile(\n"
"  \"main.ts\",\n"
"  {\n"
"    \"main.ts\": `document.getElementById(\"foo\");\\n`,\n"
"  },\n"
"  {\n"
"    lib: [\"dom\", \"esnext\"],\n"
"  },\n"
");\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:161
msgid ""
"For a list of all the libraries that TypeScript supports, see the [`lib` "
"compiler "
"option](https://www.typescriptlang.org/docs/handbook/compiler-options.html)  "
"documentation."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:163
#, no-wrap
msgid "**Don't forget to include the JavaScript library**\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:168
msgid ""
"Just like `tsc`, when you supply a `lib` compiler option, it overrides the "
"default ones, which means that the basic JavaScript library won't be "
"included and you should include the one that best represents your target "
"runtime (e.g.  `es5`, `es2015`, `es2016`, `es2017`, `es2018`, `es2019`, "
"`es2020` or `esnext`)."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:170
msgid "#### Including the `Deno` namespace"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:173
msgid ""
"In addition to the libraries that are provided by TypeScript, there are four "
"libraries that are built into Deno that can be referenced:"
msgstr ""

#. type: Bullet: '- '
#: docs/runtime/compiler_apis.md:182
msgid "`deno.ns` - Provides the `Deno` namespace."
msgstr ""

#. type: Bullet: '- '
#: docs/runtime/compiler_apis.md:182
msgid ""
"`deno.shared_globals` - Provides global interfaces and variables which Deno "
"supports at runtime that are then exposed by the final runtime library."
msgstr ""

#. type: Bullet: '- '
#: docs/runtime/compiler_apis.md:182
msgid ""
"`deno.window` - Exposes the global variables plus the Deno namespace that "
"are available in the Deno main worker and is the default for the runtime "
"compiler APIs."
msgstr ""

#. type: Bullet: '- '
#: docs/runtime/compiler_apis.md:182
msgid ""
"`deno.worker` - Exposes the global variables that are available in workers "
"under Deno."
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:185
msgid ""
"So to add the Deno namespace to a compilation, you would include the "
"`deno.ns` lib in the array. For example:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:197
#, no-wrap
msgid ""
"```ts\n"
"const [errors, emitted] = await Deno.compile(\n"
"  \"main.ts\",\n"
"  {\n"
"    \"main.ts\": `document.getElementById(\"foo\");\\n`,\n"
"  },\n"
"  {\n"
"    lib: [\"dom\", \"esnext\", \"deno.ns\"],\n"
"  },\n"
");\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:201
#, no-wrap
msgid ""
"**Note** that the Deno namespace expects a runtime environment that is at "
"least\n"
"ES2018 or later. This means if you use a lib \"lower\" than ES2018 you will "
"get\n"
"errors logged as part of the compilation.\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:203
msgid "#### Using the triple slash reference"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:208
msgid ""
"You do not have to specify the `lib` in the compiler options. Deno also "
"supports [the triple-slash reference to a "
"lib](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-lib-)  "
"which can be embedded in the contents of the file. For example, if you have "
"a `main.ts` like:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:211
msgid "```ts /// <reference lib=\"dom\" />"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:214
msgid "document.getElementById(\"foo\"); ```"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:216
msgid "It would compile without errors like this:"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:222
#, no-wrap
msgid ""
"```ts\n"
"const [errors, emitted] = await Deno.compile(\"./main.ts\", undefined, {\n"
"  lib: [\"esnext\"],\n"
"});\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/compiler_apis.md:225
#, no-wrap
msgid ""
"**Note** that the `dom` library conflicts with some of the default globals "
"that\n"
"are defined in the default type library for Deno. To avoid this, you need "
"to\n"
"specify a `lib` option in the compiler options to the runtime compiler "
"APIs.\n"
msgstr ""
