# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: 2021-03-17 08:11+0000\n"
"Last-Translator: Weblate Admin <weblate.admin@example.com>\n"
"Language-Team: Chinese (Simplified) <http://weblate.example.com/projects/"
"deno-docs/workers/zh_Hans/>\n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.3.2\n"

#. type: Title ##
#: docs/runtime/workers.md:1
#, no-wrap
msgid "Workers"
msgstr "Worker"

#. type: Plain text
#: docs/runtime/workers.md:5
msgid ""
"Deno supports [`Web Worker API`](https://developer.mozilla.org/en-US/docs/"
"Web/API/Worker/Worker)."
msgstr ""
"Deno 提供[`Web Worker API`](https://developer.mozilla.org/en-US/docs/Web/API/"
"Worker/Worker)。"

#. type: Plain text
#: docs/runtime/workers.md:8
msgid ""
"Workers can be used to run code on multiple threads. Each instance of "
"`Worker` is run on a separate thread, dedicated only to that worker."
msgstr "Worker 可用于多线程执行代码。每一个`Worker`在各自专用的线程上运行。"

#. type: Plain text
#: docs/runtime/workers.md:11
msgid ""
"Currently Deno supports only `module` type workers; thus it's essential to "
"pass the `type: \"module\"` option when creating a new worker."
msgstr ""
"当前 Deno 只提供了`module`类型的 Worker，因此你必须传递`type: \"module\"`选项来生成 Worker 实例。"

#. type: Plain text
#: docs/runtime/workers.md:16
msgid ""
"Relative module specifiers are [not supported](https://github.com/denoland/"
"deno/issues/5216) at the moment. You can instead use the `URL` contructor "
"and `import.meta.url` to easily create a specifier for some nearby script."
msgstr ""
"Deno 暂时[无法解析](https://github.com/denoland/deno/issues/"
"5216)模块的相对路径，不过你可以使用构造函数`URL`和`import.meta.url`来指定脚本路径。"

#. type: Fenced code block (ts)
#: docs/runtime/workers.md:17
#, no-wrap
msgid ""
"// Good\n"
"new Worker(new URL(\"worker.js\", import.meta.url).href, { type: \"module\" });\n"
"\n"
"// Bad\n"
"new Worker(new URL(\"worker.js\", import.meta.url).href);\n"
"new Worker(new URL(\"worker.js\", import.meta.url).href, { type: \"classic\" });\n"
"new Worker(\"./worker.js\", { type: \"module\" });\n"
msgstr ""
"// 可以\n"
"new Worker(new URL(\"worker.js\", import.meta.url).href, { type: \"module\" "
"});\n"
"\n"
"// 不可以\n"
"new Worker(new URL(\"worker.js\", import.meta.url).href);\n"
"new Worker(new URL(\"worker.js\", import.meta.url).href, { type: \"classic\" "
"});\n"
"new Worker(\"./worker.js\", { type: \"module\" });\n"

#. type: Title ###
#: docs/runtime/workers.md:27
#, no-wrap
msgid "Permissions"
msgstr "权限"

#. type: Plain text
#: docs/runtime/workers.md:31
msgid ""
"Creating a new `Worker` instance is similar to a dynamic import; therefore "
"Deno requires appropriate permission for this action."
msgstr "Deno 需要授予相关权限来创建`Worker`示例（类似于动态导入）。"

#. type: Plain text
#: docs/runtime/workers.md:33
msgid "For workers using local modules; `--allow-read` permission is required:"
msgstr "如果创建的 Worker 导入本地模块，那么需要授予`--allow-read`权限："

#. type: Plain text
#: docs/runtime/workers.md:35 docs/runtime/workers.md:58
#, no-wrap
msgid "**main.ts**\n"
msgstr "**main.ts**\n"

#. type: Fenced code block (ts)
#: docs/runtime/workers.md:36
#, no-wrap
msgid "new Worker(new URL(\"worker.ts\", import.meta.url).href, { type: \"module\" });\n"
msgstr ""
"new Worker(new URL(\"worker.ts\", import.meta.url).href, { type: \"module\" "
"});\n"

#. type: Plain text
#: docs/runtime/workers.md:41
#, no-wrap
msgid "**worker.ts**\n"
msgstr "**worker.ts**\n"

#. type: Fenced code block (ts)
#: docs/runtime/workers.md:42 docs/runtime/workers.md:65
#, no-wrap
msgid ""
"console.log(\"hello world\");\n"
"self.close();\n"
msgstr ""
"console.log(\"hello world\");\n"
"self.close();\n"

#. type: Fenced code block (shell)
#: docs/runtime/workers.md:47
#, no-wrap
msgid ""
"$ deno run main.ts\n"
"error: Uncaught PermissionDenied: read access to \"./worker.ts\", run again with the --allow-read flag\n"
"\n"
"$ deno run --allow-read main.ts\n"
"hello world\n"
msgstr ""
"$ deno run main.ts\n"
"error: Uncaught PermissionDenied: read access to \"./worker.ts\", run again "
"with the --allow-read flag\n"
"\n"
"$ deno run --allow-read main.ts\n"
"hello world\n"

#. type: Plain text
#: docs/runtime/workers.md:56
msgid "For workers using remote modules; `--allow-net` permission is required:"
msgstr "如果创建的 Worker 导入云端模块，那么需要授予`--allow-net`权限："

#. type: Fenced code block (ts)
#: docs/runtime/workers.md:59
#, no-wrap
msgid "new Worker(\"https://example.com/worker.ts\", { type: \"module\" });\n"
msgstr "new Worker(\"https://example.com/worker.ts\", { type: \"module\" });\n"

#. type: Plain text
#: docs/runtime/workers.md:64
#, no-wrap
msgid "**worker.ts** (at https[]()://example.com/worker.ts)\n"
msgstr "**worker.ts** (at https[]()://example.com/worker.ts)\n"

#. type: Fenced code block (shell)
#: docs/runtime/workers.md:70
#, no-wrap
msgid ""
"$ deno run main.ts\n"
"error: Uncaught PermissionDenied: net access to \"https://example.com/worker.ts\", run again with the --allow-net flag\n"
"\n"
"$ deno run --allow-net main.ts\n"
"hello world\n"
msgstr ""
"$ deno run main.ts\n"
"error: Uncaught PermissionDenied: net access to \"https://example.com/worker."
"ts\", run again with the --allow-net flag\n"
"\n"
"$ deno run --allow-net main.ts\n"
"hello world\n"

#. type: Title ###
#: docs/runtime/workers.md:78
#, no-wrap
msgid "Using Deno in worker"
msgstr "Worker 内运行 Deno"

#. type: Plain text
#: docs/runtime/workers.md:82
#, no-wrap
msgid ""
"> This is an unstable Deno feature. Learn more about\n"
"> [unstable features](./stability.md).\n"
msgstr ""
"> 该特性不稳定，参见\n"
"> [稳定性](./stability.md)。\n"

#. type: Plain text
#: docs/runtime/workers.md:84
msgid "By default the `Deno` namespace is not available in worker scope."
msgstr "默认情况下，Worker 实例无法访问`Deno`命名空间。"

#. type: Plain text
#: docs/runtime/workers.md:86
msgid ""
"To add the `Deno` namespace pass `deno: true` option when creating new "
"worker:"
msgstr "你可以在创建 Worker 实例时传递`deno:true`选项来添加`Deno`命名空间："

#. type: Plain text
#: docs/runtime/workers.md:88
#, no-wrap
msgid "**main.js**\n"
msgstr "**main.js**\n"

#. type: Fenced code block (ts)
#: docs/runtime/workers.md:89
#, no-wrap
msgid ""
"const worker = new Worker(new URL(\"worker.js\", import.meta.url).href, {\n"
"  type: \"module\",\n"
"  deno: true,\n"
"});\n"
"worker.postMessage({ filename: \"./log.txt\" });\n"
msgstr ""
"const worker = new Worker(new URL(\"worker.js\", import.meta.url).href, {\n"
"  type: \"module\",\n"
"  deno: true,\n"
"});\n"
"worker.postMessage({ filename: \"./log.txt\" });\n"

#. type: Plain text
#: docs/runtime/workers.md:98
#, no-wrap
msgid "**worker.js**\n"
msgstr "**worker.js**\n"

#. type: Fenced code block (ts)
#: docs/runtime/workers.md:99
#, no-wrap
msgid ""
"self.onmessage = async (e) => {\n"
"  const { filename } = e.data;\n"
"  const text = await Deno.readTextFile(filename);\n"
"  console.log(text);\n"
"  self.close();\n"
"};\n"
msgstr ""
"self.onmessage = async (e) => {\n"
"  const { filename } = e.data;\n"
"  const text = await Deno.readTextFile(filename);\n"
"  console.log(text);\n"
"  self.close();\n"
"};\n"

#. type: Plain text
#: docs/runtime/workers.md:109
#, no-wrap
msgid "**log.txt**\n"
msgstr "**log.txt**\n"

#. type: Fenced code block
#: docs/runtime/workers.md:110
#, no-wrap
msgid "hello world\n"
msgstr "hello world\n"

#. type: Fenced code block (shell)
#: docs/runtime/workers.md:114
#, no-wrap
msgid ""
"$ deno run --allow-read --unstable main.js\n"
"hello world\n"
msgstr ""
"$ deno run --allow-read --unstable main.js\n"
"hello world\n"

#. type: Plain text
#: docs/runtime/workers.md:121
msgid ""
"When the `Deno` namespace is available in worker scope, the worker inherits "
"its parent process' permissions (the ones specified using `--allow-*` flags)."
msgstr "如果 Worker 实例启用了`Deno`命名空间，该实例会继承父进程的权限，即用`--allow-*`标志指定的权限。"

#. type: Plain text
#: docs/runtime/workers.md:122
msgid "We intend to make permissions configurable for workers."
msgstr "这样做是为了让 Worker 也能配置权限。"
