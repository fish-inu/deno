# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: 2021-02-16 13:38+0000\n"
"Last-Translator: Weblate Admin <weblate.admin@example.com>\n"
"Language-Team: Chinese (Simplified) <http://weblate.example.com/projects/"
"deno-docs/permission_apis/zh_Hans/>\n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.3.2\n"

#. type: Title ##
#: docs/runtime/permission_apis.md:1
#, no-wrap
msgid "Permission APIs"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:5
#, no-wrap
msgid ""
"> This API is unstable. Learn more about\n"
"> [unstable features](../runtime/stability.md).\n"
msgstr ""
"> 该 API 不稳定，参见\n"
"> [稳定性](../runtime/stability.md).\n"

#. type: Plain text
#: docs/runtime/permission_apis.md:9
msgid ""
"Permissions are granted from the CLI when running the `deno` command. User "
"code will often assume its own set of required permissions, but there is no "
"guarantee during execution that the set of _granted_ permissions will align "
"with this."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:12
msgid ""
"In some cases, ensuring a fault-tolerant program requires a way to interact "
"with the permission system at runtime."
msgstr ""

#. type: Title ###
#: docs/runtime/permission_apis.md:13
#, no-wrap
msgid "Permission descriptors"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:17
msgid ""
"On the CLI, read permission for `/foo/bar` is represented as `--allow-read=/"
"foo/bar`. In runtime JS, it is represented as the following:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:18
#, no-wrap
msgid "const desc = { name: \"read\", path: \"/foo/bar\" } as const;\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:23
msgid "Other examples:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:24
#, no-wrap
msgid ""
"// Global write permission.\n"
"const desc1 = { name: \"write\" } as const;\n"
"\n"
"// Write permission to `$PWD/foo/bar`.\n"
"const desc2 = { name: \"write\", path: \"foo/bar\" } as const;\n"
"\n"
"// Global net permission.\n"
"const desc3 = { name: \"net\" } as const;\n"
"\n"
"// Net permission to 127.0.0.1:8000.\n"
"const desc4 = { name: \"net\", url: \"127.0.0.1:8000\" } as const;\n"
"\n"
"// High-resolution time permission.\n"
"const desc5 = { name: \"hrtime\" } as const;\n"
msgstr ""

#. type: Title ###
#: docs/runtime/permission_apis.md:41
#, no-wrap
msgid "Query permissions"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:44
msgid "Check, by descriptor, if a permission is granted or not."
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:45
#, no-wrap
msgid ""
"// deno run --unstable --allow-read=/foo main.ts\n"
"\n"
"const desc1 = { name: \"read\", path: \"/foo\" } as const;\n"
"console.log(await Deno.permissions.query(desc1));\n"
"// PermissionStatus { state: \"granted\" }\n"
"\n"
"const desc2 = { name: \"read\", path: \"/foo/bar\" } as const;\n"
"console.log(await Deno.permissions.query(desc2));\n"
"// PermissionStatus { state: \"granted\" }\n"
"\n"
"const desc3 = { name: \"read\", path: \"/bar\" } as const;\n"
"console.log(await Deno.permissions.query(desc3));\n"
"// PermissionStatus { state: \"prompt\" }\n"
msgstr ""

#. type: Title ###
#: docs/runtime/permission_apis.md:61
#, no-wrap
msgid "Permission states"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:68
msgid ""
"A permission state can be either \"granted\", \"prompt\" or \"denied\". "
"Permissions which have been granted from the CLI will query to `{ state: "
"\"granted\" }`. Those which have not been granted query to `{ state: \"prompt"
"\" }` by default, while `{ state: \"denied\" }` reserved for those which "
"have been explicitly refused.  This will come up in [Request permissions]"
"(#request-permissions)."
msgstr ""

#. type: Title ###
#: docs/runtime/permission_apis.md:69
#, no-wrap
msgid "Permission strength"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:74
msgid ""
"The intuitive understanding behind the result of the second query in [Query "
"permissions](#query-permissions) is that read access was granted to `/foo` "
"and `/foo/bar` is within `/foo` so `/foo/bar` is allowed to be read."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:78
msgid ""
"We can also say that `desc1` is _[stronger than](https://www.w3.org/TR/"
"permissions/#ref-for-permissiondescriptor-stronger-than)_ `desc2`. This "
"means that for any set of CLI-granted permissions:"
msgstr ""

#. type: Bullet: '1. '
#: docs/runtime/permission_apis.md:81
msgid "If `desc1` queries to `{ state: \"granted\" }` then so must `desc2`."
msgstr ""

#. type: Bullet: '2. '
#: docs/runtime/permission_apis.md:81
msgid "If `desc2` queries to `{ state: \"denied\" }` then so must `desc1`."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:83
msgid "More examples:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:84
#, no-wrap
msgid ""
"const desc1 = { name: \"write\" } as const;\n"
"// is stronger than\n"
"const desc2 = { name: \"write\", path: \"/foo\" } as const;\n"
"\n"
"const desc3 = { name: \"net\" } as const;\n"
"// is stronger than\n"
"const desc4 = { name: \"net\", url: \"127.0.0.1:8000\" } as const;\n"
msgstr ""

#. type: Title ###
#: docs/runtime/permission_apis.md:94
#, no-wrap
msgid "Request permissions"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:97
msgid "Request an ungranted permission from the user via CLI prompt."
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:98
#, no-wrap
msgid ""
"// deno run --unstable main.ts\n"
"\n"
"const desc1 = { name: \"read\", path: \"/foo\" } as const;\n"
"const status1 = await Deno.permissions.request(desc1);\n"
"// ⚠️ Deno requests read access to \"/foo\". Grant? [g/d (g = grant, d = deny)] g\n"
"console.log(status1);\n"
"// PermissionStatus { state: \"granted\" }\n"
"\n"
"const desc2 = { name: \"read\", path: \"/bar\" } as const;\n"
"const status2 = await Deno.permissions.request(desc2);\n"
"// ⚠️ Deno requests read access to \"/bar\". Grant? [g/d (g = grant, d = deny)] d\n"
"console.log(status2);\n"
"// PermissionStatus { state: \"denied\" }\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:119
msgid ""
"If the current permission state is \"prompt\", a prompt will appear on the "
"user's terminal asking them if they would like to grant the request. The "
"request for `desc1` was granted so its new status is returned and execution "
"will continue as if `--allow-read=/foo` was specified on the CLI. The "
"request for `desc2` was denied so its permission state is downgraded from "
"\"prompt\" to \"denied\"."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:124
msgid ""
"If the current permission state is already either \"granted\" or \"denied\", "
"the request will behave like a query and just return the current status. "
"This prevents prompts both for already granted permissions and previously "
"denied requests."
msgstr ""

#. type: Title ###
#: docs/runtime/permission_apis.md:125
#, no-wrap
msgid "Revoke permissions"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:128
msgid "Downgrade a permission from \"granted\" to \"prompt\"."
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:129
#, no-wrap
msgid ""
"// deno run --unstable --allow-read=/foo main.ts\n"
"\n"
"const desc = { name: \"read\", path: \"/foo\" } as const;\n"
"console.log(await Deno.permissions.revoke(desc));\n"
"// PermissionStatus { state: \"prompt\" }\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:139
msgid ""
"However, what happens when you try to revoke a permission which is _partial_ "
"to one granted on the CLI?"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:140
#, no-wrap
msgid ""
"// deno run --unstable --allow-read=/foo main.ts\n"
"\n"
"const desc = { name: \"read\", path: \"/foo/bar\" } as const;\n"
"console.log(await Deno.permissions.revoke(desc));\n"
"// PermissionStatus { state: \"granted\" }\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:149
msgid "It was not revoked."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:153
msgid ""
"To understand this behaviour, imagine that Deno stores an internal set of "
"_explicitly granted permission descriptors_. Specifying `--allow-read=/foo,/"
"bar` on the CLI initializes this set to:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:154
#, no-wrap
msgid ""
"[\n"
"  { name: \"read\", path: \"/foo\" },\n"
"  { name: \"read\", path: \"/bar\" },\n"
"];\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:163
msgid ""
"Granting a runtime request for `{ name: \"write\", path: \"/foo\" }` updates "
"the set to:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:164
#, no-wrap
msgid ""
"[\n"
"  { name: \"read\", path: \"/foo\" },\n"
"  { name: \"read\", path: \"/bar\" },\n"
"  { name: \"write\", path: \"/foo\" },\n"
"];\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:176
msgid ""
"Deno's permission revocation algorithm works by removing every element from "
"this set which the argument permission descriptor is _stronger than_. So to "
"ensure `desc` is not longer granted, pass an argument descriptor _stronger "
"than_ whichever _explicitly granted permission descriptor_ is _stronger "
"than_ `desc`."
msgstr ""

#. type: Fenced code block (ts)
#: docs/runtime/permission_apis.md:177
#, no-wrap
msgid ""
"// deno run --unstable --allow-read=/foo main.ts\n"
"\n"
"const desc = { name: \"read\", path: \"/foo/bar\" } as const;\n"
"console.log(await Deno.permissions.revoke(desc)); // Insufficient.\n"
"// PermissionStatus { state: \"granted\" }\n"
"\n"
"const strongDesc = { name: \"read\", path: \"/foo\" } as const;\n"
"await Deno.permissions.revoke(strongDesc); // Good.\n"
"\n"
"console.log(await Deno.permissions.query(desc));\n"
"// PermissionStatus { state: \"prompt\" }\n"
msgstr ""
