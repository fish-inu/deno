# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-19 16:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: docs/runtime/permission_apis.md:2
msgid "## Permission APIs"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:5
msgid ""
"> This API is unstable. Learn more about > [unstable "
"features](../runtime/stability.md)."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:9
msgid ""
"Permissions are granted from the CLI when running the `deno` command. User "
"code will often assume its own set of required permissions, but there is no "
"guarantee during execution that the set of _granted_ permissions will align "
"with this."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:12
msgid ""
"In some cases, ensuring a fault-tolerant program requires a way to interact "
"with the permission system at runtime."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:14
msgid "### Permission descriptors"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:17
msgid ""
"On the CLI, read permission for `/foo/bar` is represented as "
"`--allow-read=/foo/bar`. In runtime JS, it is represented as the following:"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:21
msgid "```ts const desc = { name: \"read\", path: \"/foo/bar\" } as const; ```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:23
msgid "Other examples:"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:27
msgid ""
"```ts // Global write permission.  const desc1 = { name: \"write\" } as "
"const;"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:30
msgid ""
"// Write permission to `$PWD/foo/bar`.  const desc2 = { name: \"write\", "
"path: \"foo/bar\" } as const;"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:33
msgid "// Global net permission.  const desc3 = { name: \"net\" } as const;"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:36
msgid ""
"// Net permission to 127.0.0.1:8000.  const desc4 = { name: \"net\", url: "
"\"127.0.0.1:8000\" } as const;"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:40
msgid ""
"// High-resolution time permission.  const desc5 = { name: \"hrtime\" } as "
"const; ```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:42
msgid "### Query permissions"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:44
msgid "Check, by descriptor, if a permission is granted or not."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:47 docs/runtime/permission_apis.md:131 docs/runtime/permission_apis.md:142 docs/runtime/permission_apis.md:179
msgid "```ts // deno run --unstable --allow-read=/foo main.ts"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:51
msgid ""
"const desc1 = { name: \"read\", path: \"/foo\" } as const; console.log(await "
"Deno.permissions.query(desc1)); // PermissionStatus { state: \"granted\" }"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:55
msgid ""
"const desc2 = { name: \"read\", path: \"/foo/bar\" } as const; "
"console.log(await Deno.permissions.query(desc2)); // PermissionStatus { "
"state: \"granted\" }"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:60
msgid ""
"const desc3 = { name: \"read\", path: \"/bar\" } as const; console.log(await "
"Deno.permissions.query(desc3)); // PermissionStatus { state: \"prompt\" } "
"```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:62
msgid "### Permission states"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:68
msgid ""
"A permission state can be either \"granted\", \"prompt\" or "
"\"denied\". Permissions which have been granted from the CLI will query to "
"`{ state: \"granted\" }`. Those which have not been granted query to `{ "
"state: \"prompt\" }` by default, while `{ state: \"denied\" }` reserved for "
"those which have been explicitly refused.  This will come up in [Request "
"permissions](#request-permissions)."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:70
msgid "### Permission strength"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:74
msgid ""
"The intuitive understanding behind the result of the second query in [Query "
"permissions](#query-permissions) is that read access was granted to `/foo` "
"and `/foo/bar` is within `/foo` so `/foo/bar` is allowed to be read."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:78
msgid ""
"We can also say that `desc1` is _[stronger "
"than](https://www.w3.org/TR/permissions/#ref-for-permissiondescriptor-stronger-than)_ "
"`desc2`. This means that for any set of CLI-granted permissions:"
msgstr ""

#. type: Bullet: '1. '
#: docs/runtime/permission_apis.md:81
msgid "If `desc1` queries to `{ state: \"granted\" }` then so must `desc2`."
msgstr ""

#. type: Bullet: '2. '
#: docs/runtime/permission_apis.md:81
msgid "If `desc2` queries to `{ state: \"denied\" }` then so must `desc1`."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:83
msgid "More examples:"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:88
msgid ""
"```ts const desc1 = { name: \"write\" } as const; // is stronger than const "
"desc2 = { name: \"write\", path: \"/foo\" } as const;"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:93
msgid ""
"const desc3 = { name: \"net\" } as const; // is stronger than const desc4 = "
"{ name: \"net\", url: \"127.0.0.1:8000\" } as const; ```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:95
msgid "### Request permissions"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:97
msgid "Request an ungranted permission from the user via CLI prompt."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:100
msgid "```ts // deno run --unstable main.ts"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:106
msgid ""
"const desc1 = { name: \"read\", path: \"/foo\" } as const; const status1 = "
"await Deno.permissions.request(desc1); // ⚠️ Deno requests read access to "
"\"/foo\". Grant? [g/d (g = grant, d = deny)] g console.log(status1); // "
"PermissionStatus { state: \"granted\" }"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:113
msgid ""
"const desc2 = { name: \"read\", path: \"/bar\" } as const; const status2 = "
"await Deno.permissions.request(desc2); // ⚠️ Deno requests read access to "
"\"/bar\". Grant? [g/d (g = grant, d = deny)] d console.log(status2); // "
"PermissionStatus { state: \"denied\" } ```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:119
msgid ""
"If the current permission state is \"prompt\", a prompt will appear on the "
"user's terminal asking them if they would like to grant the request. The "
"request for `desc1` was granted so its new status is returned and execution "
"will continue as if `--allow-read=/foo` was specified on the CLI. The "
"request for `desc2` was denied so its permission state is downgraded from "
"\"prompt\" to \"denied\"."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:124
msgid ""
"If the current permission state is already either \"granted\" or \"denied\", "
"the request will behave like a query and just return the current "
"status. This prevents prompts both for already granted permissions and "
"previously denied requests."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:126
msgid "### Revoke permissions"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:128
msgid "Downgrade a permission from \"granted\" to \"prompt\"."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:136
msgid ""
"const desc = { name: \"read\", path: \"/foo\" } as const; console.log(await "
"Deno.permissions.revoke(desc)); // PermissionStatus { state: \"prompt\" } "
"```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:139
msgid ""
"However, what happens when you try to revoke a permission which is _partial_ "
"to one granted on the CLI?"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:147
msgid ""
"const desc = { name: \"read\", path: \"/foo/bar\" } as const; "
"console.log(await Deno.permissions.revoke(desc)); // PermissionStatus { "
"state: \"granted\" } ```"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:149
msgid "It was not revoked."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:153
msgid ""
"To understand this behaviour, imagine that Deno stores an internal set of "
"_explicitly granted permission descriptors_. Specifying "
"`--allow-read=/foo,/bar` on the CLI initializes this set to:"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:160
#, no-wrap
msgid ""
"```ts\n"
"[\n"
"  { name: \"read\", path: \"/foo\" },\n"
"  { name: \"read\", path: \"/bar\" },\n"
"];\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:163
msgid ""
"Granting a runtime request for `{ name: \"write\", path: \"/foo\" }` updates "
"the set to:"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:171
#, no-wrap
msgid ""
"```ts\n"
"[\n"
"  { name: \"read\", path: \"/foo\" },\n"
"  { name: \"read\", path: \"/bar\" },\n"
"  { name: \"write\", path: \"/foo\" },\n"
"];\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:176
msgid ""
"Deno's permission revocation algorithm works by removing every element from "
"this set which the argument permission descriptor is _stronger than_. So to "
"ensure `desc` is not longer granted, pass an argument descriptor _stronger "
"than_ whichever _explicitly granted permission descriptor_ is _stronger "
"than_ `desc`."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:183
msgid ""
"const desc = { name: \"read\", path: \"/foo/bar\" } as const; "
"console.log(await Deno.permissions.revoke(desc)); // Insufficient.  // "
"PermissionStatus { state: \"granted\" }"
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:186
msgid ""
"const strongDesc = { name: \"read\", path: \"/foo\" } as const; await "
"Deno.permissions.revoke(strongDesc); // Good."
msgstr ""

#. type: Plain text
#: docs/runtime/permission_apis.md:189
msgid ""
"console.log(await Deno.permissions.query(desc)); // PermissionStatus { "
"state: \"prompt\" } ```"
msgstr ""
