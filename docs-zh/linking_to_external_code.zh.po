# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/linking_to_external_code.md:1
#, no-wrap
msgid "Linking to third party code"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:6
msgid ""
"In the [Getting Started](./getting_started.md) section, we saw Deno could "
"execute scripts from URLs. Like browser JavaScript, Deno can import "
"libraries directly from URLs. This example uses a URL to import an assertion "
"library:"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:8
#, no-wrap
msgid "**test.ts**\n"
msgstr ""

#. type: Fenced code block (ts)
#: docs/linking_to_external_code.md:9
#, no-wrap
msgid ""
"import { assertEquals } from \"https://deno.land/std@$STD_VERSION/testing/asserts.ts\";\n"
"\n"
"assertEquals(\"hello\", \"hello\");\n"
"assertEquals(\"world\", \"world\");\n"
"\n"
"console.log(\"Asserted! ✓\");\n"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:19
msgid "Try running this:"
msgstr ""

#. type: Fenced code block (shell)
#: docs/linking_to_external_code.md:20
#, no-wrap
msgid ""
"$ deno run test.ts\n"
"Compile file:///mnt/f9/Projects/github.com/denoland/deno/docs/test.ts\n"
"Download https://deno.land/std@$STD_VERSION/testing/asserts.ts\n"
"Download https://deno.land/std@$STD_VERSION/fmt/colors.ts\n"
"Download https://deno.land/std@$STD_VERSION/testing/diff.ts\n"
"Asserted! ✓\n"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:32
msgid ""
"Note that we did not have to provide the `--allow-net` flag for this "
"program, and yet it accessed the network. The runtime has special access to "
"download imports and cache them to disk."
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:38
msgid ""
"Deno caches remote imports in a special directory specified by the "
"`DENO_DIR` environment variable. It defaults to the system's cache directory "
"if `DENO_DIR` is not specified. The next time you run the program, no "
"downloads will be made.  If the program hasn't changed, it won't be "
"recompiled either. The default directory is:"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:43
msgid ""
"- On Linux/Redox: `$XDG_CACHE_HOME/deno` or `$HOME/.cache/deno` - On "
"Windows: `%LOCALAPPDATA%/deno` (`%LOCALAPPDATA%` = `FOLDERID_LocalAppData`)  "
"- On macOS: `$HOME/Library/Caches/deno` - If something fails, it falls back "
"to `$HOME/.deno`"
msgstr ""

#. type: Title ##
#: docs/linking_to_external_code.md:44
#, no-wrap
msgid "FAQ"
msgstr ""

#. type: Title ###
#: docs/linking_to_external_code.md:46
#, no-wrap
msgid "How do I import a specific version of a module?"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:50
msgid ""
"Specify the version in the URL. For example, this URL fully specifies the "
"code being run: `https://unpkg.com/liltest@0.0.5/dist/liltest.js`."
msgstr ""

#. type: Title ###
#: docs/linking_to_external_code.md:51
#, no-wrap
msgid "It seems unwieldy to import URLs everywhere."
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:54
#, no-wrap
msgid "> What if one of the URLs links to a subtly different version of a library?\n"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:56
#, no-wrap
msgid "> Isn't it error prone to maintain URLs everywhere in a large project?\n"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:63
msgid ""
"The solution is to import and re-export your external libraries in a central "
"`deps.ts` file (which serves the same purpose as Node's `package.json` "
"file).  For example, let's say you were using the above assertion library "
"across a large project. Rather than importing `\"https://deno.land/std@"
"$STD_VERSION/testing/asserts.ts\"` everywhere, you could create a `deps.ts` "
"file that exports the third-party code:"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:65
#, no-wrap
msgid "**deps.ts**\n"
msgstr ""

#. type: Fenced code block (ts)
#: docs/linking_to_external_code.md:66
#, no-wrap
msgid ""
"export {\n"
"  assert,\n"
"  assertEquals,\n"
"  assertStrContains,\n"
"} from \"https://deno.land/std@$STD_VERSION/testing/asserts.ts\";\n"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:76
msgid ""
"And throughout the same project, you can import from the `deps.ts` and avoid "
"having many references to the same URL:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/linking_to_external_code.md:77
#, no-wrap
msgid "import { assertEquals, runTests, test } from \"./deps.ts\";\n"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:83
msgid ""
"This design circumvents a plethora of complexity spawned by package "
"management software, centralized code repositories, and superfluous file "
"formats."
msgstr ""

#. type: Title ###
#: docs/linking_to_external_code.md:84
#, no-wrap
msgid "How can I trust a URL that may change?"
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:90
msgid ""
"By using a lock file (with the `--lock` command line flag), you can ensure "
"that the code pulled from a URL is the same as it was during initial "
"development. You can learn more about this [here](./linking_to_external_code/"
"integrity_checking.md)."
msgstr ""

#. type: Title ###
#: docs/linking_to_external_code.md:91
#, no-wrap
msgid "But what if the host of the URL goes down? The source won't be available."
msgstr ""

#. type: Plain text
#: docs/linking_to_external_code.md:99
msgid ""
"This, like the above, is a problem faced by _any_ remote dependency system.  "
"Relying on external servers is convenient for development but brittle in "
"production. Production software should always vendor its dependencies. In "
"Node this is done by checking `node_modules` into source control. In Deno "
"this is done by pointing `$DENO_DIR` to some project-local directory at "
"runtime, and similarly checking that into source control:"
msgstr ""

#. type: Fenced code block (shell)
#: docs/linking_to_external_code.md:100
#, no-wrap
msgid ""
"# Download the dependencies.\n"
"DENO_DIR=./deno_dir deno cache src/deps.ts\n"
"\n"
"# Make sure the variable is set for any command which invokes the cache.\n"
"DENO_DIR=./deno_dir deno test src\n"
"\n"
"# Check the directory into source control.\n"
"git add -u deno_dir\n"
"git commit\n"
msgstr ""
