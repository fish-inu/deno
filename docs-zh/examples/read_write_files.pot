# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-19 16:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: docs/examples/read_write_files.md:2
msgid "# Read and write files"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:4
msgid "## Concepts"
msgstr ""

#. type: Bullet: '- '
#: docs/examples/read_write_files.md:16
msgid ""
"Deno's runtime API provides the "
"[Deno.readTextFile](https://doc.deno.land/builtin/stable#Deno.readTextFile)  "
"and "
"[Deno.writeTextFile](https://doc.deno.land/builtin/stable#Deno.writeTextFile)  "
"asynchronous functions for reading and writing entire text files."
msgstr ""

#. type: Bullet: '- '
#: docs/examples/read_write_files.md:16
msgid ""
"Like many of Deno's APIs, synchronous alternatives are also available. See "
"[Deno.readTextFileSync](https://doc.deno.land/builtin/stable#Deno.readTextFileSync)  "
"and "
"[Deno.writeTextFileSync](https://doc.deno.land/builtin/stable#Deno.writeTextFileSync)."
msgstr ""

#. type: Bullet: '- '
#: docs/examples/read_write_files.md:16
msgid ""
"Use `--allow-read` and `--allow-write` permissions to gain access to the "
"file system."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:18
msgid "## Overview"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:23
msgid ""
"Interacting with the filesystem to read and write files is a common "
"requirement.  Deno provides a number of ways to do this via the [standard "
"library](https://deno.land/std) and the [Deno runtime "
"API](https://doc.deno.land/builtin/stable)."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:28
msgid ""
"As highlighted in the [Fetch Data example](./fetch_data) Deno restricts "
"access to Input / Output by default for security reasons. Therefore when "
"interacting with the filesystem the `--allow-read` and `--allow-write` flags "
"must be used with the `deno run` command."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:30
msgid "## Reading a text file"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:34
msgid ""
"The Deno runtime API makes it possible to read text files via the "
"`Deno.readTextFile()` method, it just requires a path string or URL "
"object. The method returns a promise which provides access to the file's "
"text data."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:36
#, no-wrap
msgid "**Command:** `deno run --allow-read read.ts`\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:42
#, no-wrap
msgid ""
"```typescript\n"
"/**\n"
" * read.ts\n"
" */\n"
"const text = Deno.readTextFile(\"./people.json\");\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:44
msgid "text.then((response) => console.log(response));"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:55
#, no-wrap
msgid ""
"/**\n"
" * Output:\n"
" *\n"
" * [\n"
" *   {\"id\": 1, \"name\": \"John\", \"age\": 23},\n"
" *   {\"id\": 2, \"name\": \"Sandra\", \"age\": 51},\n"
" *   {\"id\": 5, \"name\": \"Devika\", \"age\": 11}\n"
" * ]\n"
" */\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:57
msgid "## Writing a text file"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:61
msgid ""
"The Deno runtime API allows developers to write text to files via the "
"`Deno.writeTextFile()` method. It just requires a file path and text "
"string. The method returns a promise which resolves when the file was "
"successfully written."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:64
msgid ""
"To run the command the `--allow-write` flag must be supplied to the `deno "
"run` command."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:66 docs/examples/read_write_files.md:88
#, no-wrap
msgid "**Command:** `deno run --allow-write write.ts`\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:72
#, no-wrap
msgid ""
"```typescript\n"
"/**\n"
" * write.ts\n"
" */\n"
"const write = Deno.writeTextFile(\"./hello.txt\", \"Hello World!\");\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:74
msgid "write.then(() => console.log(\"File written to ./hello.txt\"));"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:79
#, no-wrap
msgid ""
"/**\n"
" * Output: File written to ./hello.txt\n"
" */\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:84
msgid ""
"By combining `Deno.writeTextFile` and `JSON.stringify` you can easially "
"write serialized JSON objects to a file. This example uses synchronous "
"`Deno.writeTextFileSync`, but this can also be done asynchronously using "
"`await Deno.writeTextFile`."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:86
msgid "To execute the code the `deno run` command needs the write flag."
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:96
#, no-wrap
msgid ""
"```typescript\n"
"/**\n"
" * write.ts\n"
" */\n"
"function writeJson(path: string, data: object): string {\n"
"  try {\n"
"    Deno.writeTextFileSync(path, JSON.stringify(data));\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:102
#, no-wrap
msgid ""
"    return \"Written to \" + path;\n"
"  } catch (e) {\n"
"    return e.message;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:104
msgid "console.log(writeJson(\"./data.json\", { hello: \"World\" }));"
msgstr ""

#. type: Plain text
#: docs/examples/read_write_files.md:108
#, no-wrap
msgid ""
"/**\n"
" * Output: Written to ./data.json\n"
" */\n"
"```\n"
msgstr ""
