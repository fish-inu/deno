# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/examples/os_signals.md:1
#, no-wrap
msgid "Handle OS Signals"
msgstr ""

#. type: Plain text
#: docs/examples/os_signals.md:5
#, no-wrap
msgid ""
"> This program makes use of an unstable Deno feature. Learn more about\n"
"> [unstable features](../runtime/stability.md).\n"
msgstr ""

#. type: Title ##
#: docs/examples/os_signals.md:6
#, no-wrap
msgid "Concepts"
msgstr ""

#. type: Bullet: '- '
#: docs/examples/os_signals.md:14
msgid "Use the `--unstable` flag to access new or unstable features in Deno."
msgstr ""

#. type: Bullet: '- '
#: docs/examples/os_signals.md:14
msgid ""
"[Deno.signal](https://doc.deno.land/builtin/unstable#Deno.signal) can be "
"used to capture and monitor OS signals."
msgstr ""

#. type: Bullet: '- '
#: docs/examples/os_signals.md:14
msgid ""
"Use the `dispose()` function of the Deno.signal [SignalStream](https://doc."
"deno.land/builtin/unstable#Deno.SignalStream) to stop watching the signal."
msgstr ""

#. type: Title ##
#: docs/examples/os_signals.md:15
#, no-wrap
msgid "Async iterator example"
msgstr ""

#. type: Plain text
#: docs/examples/os_signals.md:18
msgid "You can use `Deno.signal()` function for handling OS signals:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/examples/os_signals.md:19
#, no-wrap
msgid ""
"/**\n"
" * async-iterator-signal.ts\n"
" */\n"
"console.log(\"Press Ctrl-C to trigger a SIGINT signal\");\n"
"for await (const _ of Deno.signal(Deno.Signal.SIGINT)) {\n"
"  console.log(\"interrupted!\");\n"
"  Deno.exit();\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/examples/os_signals.md:31 docs/examples/os_signals.md:51
#: docs/examples/os_signals.md:78
msgid "Run with:"
msgstr ""

#. type: Fenced code block (shell)
#: docs/examples/os_signals.md:32
#, no-wrap
msgid "deno run --unstable async-iterator-signal.ts\n"
msgstr ""

#. type: Title ##
#: docs/examples/os_signals.md:36
#, no-wrap
msgid "Promise based example"
msgstr ""

#. type: Plain text
#: docs/examples/os_signals.md:39
msgid "`Deno.signal()` also works as a promise:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/examples/os_signals.md:40
#, no-wrap
msgid ""
"/**\n"
" * promise-signal.ts\n"
" */\n"
"console.log(\"Press Ctrl-C to trigger a SIGINT signal\");\n"
"await Deno.signal(Deno.Signal.SIGINT);\n"
"console.log(\"interrupted!\");\n"
"Deno.exit();\n"
msgstr ""

#. type: Fenced code block (shell)
#: docs/examples/os_signals.md:52
#, no-wrap
msgid "deno run --unstable promise-signal.ts\n"
msgstr ""

#. type: Title ##
#: docs/examples/os_signals.md:56
#, no-wrap
msgid "Stop watching signals"
msgstr ""

#. type: Plain text
#: docs/examples/os_signals.md:60
msgid ""
"If you want to stop watching the signal, you can use `dispose()` method of "
"the signal object:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/examples/os_signals.md:61
#, no-wrap
msgid ""
"/**\n"
" * dispose-signal.ts\n"
" */\n"
"const sig = Deno.signal(Deno.Signal.SIGINT);\n"
"setTimeout(() => {\n"
"  sig.dispose();\n"
"  console.log(\"No longer watching SIGINT signal\");\n"
"}, 5000);\n"
"\n"
"console.log(\"Watching SIGINT signals\");\n"
"for await (const _ of sig) {\n"
"  console.log(\"interrupted\");\n"
"}\n"
msgstr ""

#. type: Fenced code block (shell)
#: docs/examples/os_signals.md:79
#, no-wrap
msgid "deno run --unstable dispose-signal.ts\n"
msgstr ""

#. type: Plain text
#: docs/examples/os_signals.md:83
msgid ""
"The above for-await loop exits after 5 seconds when `sig.dispose()` is "
"called."
msgstr ""
