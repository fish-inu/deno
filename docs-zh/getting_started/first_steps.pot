# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-19 16:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:2
msgid "## First steps"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:4
msgid ""
"This page contains some examples to teach you about the fundamentals of "
"Deno."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:10
msgid ""
"This document assumes that you have some prior knowledge of JavaScript, "
"especially about `async`/`await`. If you have no prior knowledge of "
"JavaScript, you might want to follow a guide [on the basics of "
"JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript)  "
"before attempting to start with Deno."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:12
msgid "### Hello World"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:15
msgid ""
"Deno is a runtime for JavaScript/TypeScript which tries to be web compatible "
"and use modern features wherever possible."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:18
msgid ""
"Browser compatibility means a `Hello World` program in Deno is the same as "
"the one you can run in the browser:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:22
msgid "```ts console.log(\"Welcome to Deno ðŸ¦•\"); ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:24 docs/getting_started/first_steps.md:103
msgid "Try the program:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:28
msgid "```shell deno run https://deno.land/std@$STD_VERSION/examples/welcome.ts ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:30
msgid "### Making an HTTP request"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:33
msgid ""
"Many programs use HTTP requests to fetch data from a webserver. Let's write "
"a small program that fetches a file and prints its contents out to the "
"terminal."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:37
msgid ""
"Just like in the browser you can use the web standard "
"[`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API to "
"make HTTP calls:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:41
msgid "```ts const url = Deno.args[0]; const res = await fetch(url);"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:45
msgid ""
"const body = new Uint8Array(await res.arrayBuffer()); await "
"Deno.stdout.write(body); ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:47
msgid "Let's walk through what this application does:"
msgstr ""

#. type: Bullet: '1. '
#: docs/getting_started/first_steps.md:58
msgid ""
"We get the first argument passed to the application, and store it in the "
"`url` constant."
msgstr ""

#. type: Bullet: '2. '
#: docs/getting_started/first_steps.md:58
msgid ""
"We make a request to the url specified, await the response, and store it in "
"the `res` constant."
msgstr ""

#. type: Bullet: '3. '
#: docs/getting_started/first_steps.md:58
msgid ""
"We parse the response body as an "
"[`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), "
"await the response, and convert it into a "
"[`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)  "
"to store in the `body` constant."
msgstr ""

#. type: Bullet: '4. '
#: docs/getting_started/first_steps.md:58
msgid "We write the contents of the `body` constant to `stdout`."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:60
msgid "Try it out:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:64
msgid ""
"```shell deno run https://deno.land/std@$STD_VERSION/examples/curl.ts "
"https://example.com ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:69
msgid ""
"You will see this program returns an error regarding network access, so what "
"did we do wrong? You might remember from the introduction that Deno is a "
"runtime which is secure by default. This means you need to explicitly give "
"programs the permission to do certain 'privileged' actions, such as access "
"the network."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:71
msgid "Try it out again with the correct permission flag:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:75
msgid ""
"```shell deno run --allow-net=example.com "
"https://deno.land/std@$STD_VERSION/examples/curl.ts https://example.com ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:77
msgid "### Reading a file"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:81
msgid ""
"Deno also provides APIs which do not come from the web. These are all "
"contained in the `Deno` global. You can find documentation for these APIs on "
"[doc.deno.land](https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts)."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:84
msgid ""
"Filesystem APIs for example do not have a web standard form, so Deno "
"provides its own API."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:87
msgid ""
"In this program each command-line argument is assumed to be a filename, the "
"file is opened, and printed to stdout."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:96
#, no-wrap
msgid ""
"```ts\n"
"const filenames = Deno.args;\n"
"for (const filename of filenames) {\n"
"  const file = await Deno.open(filename);\n"
"  await Deno.copy(file, Deno.stdout);\n"
"  file.close();\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:101
msgid ""
"The `copy()` function here actually makes no more than the necessary "
"kernelâ†’userspaceâ†’kernel copies. That is, the same memory from which data is "
"read from the file, is written to stdout. This illustrates a general design "
"goal for I/O streams in Deno."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:107
msgid ""
"```shell deno run --allow-read "
"https://deno.land/std@$STD_VERSION/examples/cat.ts /etc/passwd ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:109
msgid "### TCP server"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:112
msgid ""
"This is an example of a server which accepts connections on port 8080, and "
"returns to the client anything it sends."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:122
#, no-wrap
msgid ""
"```ts\n"
"const hostname = \"0.0.0.0\";\n"
"const port = 8080;\n"
"const listener = Deno.listen({ hostname, port });\n"
"console.log(`Listening on ${hostname}:${port}`);\n"
"for await (const conn of listener) {\n"
"  Deno.copy(conn, conn);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:125
msgid ""
"For security reasons, Deno does not allow programs to access the network "
"without explicit permission. To allow accessing the network, use a "
"command-line flag:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:129
msgid ""
"```shell deno run --allow-net "
"https://deno.land/std@$STD_VERSION/examples/echo_server.ts ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:131
msgid "To test it, try sending data to it with netcat:"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:137
msgid "```shell $ nc localhost 8080 hello world hello world ```"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:141
msgid ""
"Like the `cat.ts` example, the `copy()` function here also does not make "
"unnecessary memory copies. It receives a packet from the kernel and sends it "
"back, without further complexity."
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:143
msgid "### More examples"
msgstr ""

#. type: Plain text
#: docs/getting_started/first_steps.md:144
msgid ""
"You can find more examples, like an HTTP file server, in the `Examples` "
"chapter."
msgstr ""
