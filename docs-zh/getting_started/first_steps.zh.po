# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: 2021-03-12 03:33+0000\n"
"Last-Translator: Weblate Admin <weblate.admin@example.com>\n"
"Language-Team: Chinese (Simplified) <http://weblate.example.com/projects/"
"deno-docs/first_steps/zh_Hans/>\n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.3.2\n"

#. type: Title ##
#: docs/getting_started/first_steps.md:1
#, no-wrap
msgid "First steps"
msgstr "初步了解"

#. type: Plain text
#: docs/getting_started/first_steps.md:4
msgid ""
"This page contains some examples to teach you about the fundamentals of Deno."
msgstr "本文有一些示例会教你 Deno 基础。"

#. type: Plain text
#: docs/getting_started/first_steps.md:10
msgid ""
"This document assumes that you have some prior knowledge of JavaScript, "
"especially about `async`/`await`. If you have no prior knowledge of "
"JavaScript, you might want to follow a guide [on the basics of JavaScript]"
"(https://developer.mozilla.org/en-US/docs/Learn/JavaScript)  before "
"attempting to start with Deno."
msgstr ""
"阅读本文，前提是你学过 JavaScript 并熟悉其中的 `async`/`await`。如果你不会这门语言，你可能得学习一下 [JavaScript "
"基础](https://developer.mozilla.org/en-US/docs/Learn/JavaScript)，之后再着手学 Deno。"

#. type: Title ###
#: docs/getting_started/first_steps.md:11
#, no-wrap
msgid "Hello World"
msgstr "Hello World"

#. type: Plain text
#: docs/getting_started/first_steps.md:15
msgid ""
"Deno is a runtime for JavaScript/TypeScript which tries to be web compatible "
"and use modern features wherever possible."
msgstr "Deno 是 JavaScript/TypeScript 的运行时，确保浏览器兼容性，并应用最新特性。"

#. type: Plain text
#: docs/getting_started/first_steps.md:18
msgid ""
"Browser compatibility means a `Hello World` program in Deno is the same as "
"the one you can run in the browser:"
msgstr "浏览器兼容性指比如像 `Hello World` 这样用 Deno 来写的程序无异于能在浏览器内运行的程序："

#. type: Fenced code block (ts)
#: docs/getting_started/first_steps.md:19
#, no-wrap
msgid "console.log(\"Welcome to Deno 🦕\");\n"
msgstr "console.log(\"Welcome to Deno 🦕\");\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:24
#: docs/getting_started/first_steps.md:103
msgid "Try the program:"
msgstr "运行下面的程序："

#. type: Fenced code block (shell)
#: docs/getting_started/first_steps.md:25
#, no-wrap
msgid "deno run https://deno.land/std@$STD_VERSION/examples/welcome.ts\n"
msgstr "deno run https://deno.land/std@$STD_VERSION/examples/welcome.ts\n"

#. type: Title ###
#: docs/getting_started/first_steps.md:29
#, no-wrap
msgid "Making an HTTP request"
msgstr "HTTP 请求"

#. type: Plain text
#: docs/getting_started/first_steps.md:33
msgid ""
"Many programs use HTTP requests to fetch data from a webserver. Let's write "
"a small program that fetches a file and prints its contents out to the "
"terminal."
msgstr "许多程序使用 HTTP 请求来从服务器中获取数据。我们接下来将写个小程序，它会获取一个文件并将其内容打印到终端。"

#. type: Plain text
#: docs/getting_started/first_steps.md:37
msgid ""
"Just like in the browser you can use the web standard [`fetch`](https://"
"developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API to make HTTP calls:"
msgstr ""
"和浏览器一样，你可以在 Deno 中使用 [`fetch`](https://developer.mozilla.org/en-US/docs/Web/"
"API/Fetch_API) API 来发起 HTTP 请求："

#. type: Fenced code block (ts)
#: docs/getting_started/first_steps.md:38
#, no-wrap
msgid ""
"const url = Deno.args[0];\n"
"const res = await fetch(url);\n"
"\n"
"const body = new Uint8Array(await res.arrayBuffer());\n"
"await Deno.stdout.write(body);\n"
msgstr ""
"const url = Deno.args[0];\n"
"const res = await fetch(url);\n"
"\n"
"const body = new Uint8Array(await res.arrayBuffer());\n"
"await Deno.stdout.write(body);\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:47
msgid "Let's walk through what this application does:"
msgstr "我们来过一遍以上代码："

#. type: Bullet: '1. '
#: docs/getting_started/first_steps.md:58
msgid ""
"We get the first argument passed to the application, and store it in the "
"`url` constant."
msgstr "向程序传递的第一个参数赋值给常量 url。"

#. type: Bullet: '2. '
#: docs/getting_started/first_steps.md:58
msgid ""
"We make a request to the url specified, await the response, and store it in "
"the `res` constant."
msgstr "对该 url 发出请求，等待响应，并将结果赋值给常量 `res`。"

#. type: Bullet: '3. '
#: docs/getting_started/first_steps.md:58
msgid ""
"We parse the response body as an [`ArrayBuffer`](https://developer.mozilla."
"org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), await "
"the response, and convert it into a [`Uint8Array`](https://developer.mozilla."
"org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)  to store "
"in the `body` constant."
msgstr ""
"解析响应体为 [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/"
"JavaScript/Reference/Global_Objects/ArrayBuffer)，等待响应，之后转换成 "
"[`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/"
"Reference/Global_Objects/Uint8Array)，赋值到常量 `body`。"

#. type: Bullet: '4. '
#: docs/getting_started/first_steps.md:58
msgid "We write the contents of the `body` constant to `stdout`."
msgstr "将常量 `body` 的内容写入到 `stdout`。"

#. type: Plain text
#: docs/getting_started/first_steps.md:60
msgid "Try it out:"
msgstr "动手试试："

#. type: Fenced code block (shell)
#: docs/getting_started/first_steps.md:61
#, no-wrap
msgid "deno run https://deno.land/std@$STD_VERSION/examples/curl.ts https://example.com\n"
msgstr ""
"deno run https://deno.land/std@$STD_VERSION/examples/curl.ts https://example."
"com\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:69
msgid ""
"You will see this program returns an error regarding network access, so what "
"did we do wrong? You might remember from the introduction that Deno is a "
"runtime which is secure by default. This means you need to explicitly give "
"programs the permission to do certain 'privileged' actions, such as access "
"the network."
msgstr ""
"该程序会抛出网络访问相关的错误，那么哪一步做错了？你可能会想起，入门章节有提到 Deno "
"是默认设置下安全性高的运行时。因此你得显式授予权限来进行某些操作，比如访问网络。"

#. type: Plain text
#: docs/getting_started/first_steps.md:71
msgid "Try it out again with the correct permission flag:"
msgstr "添加对应的权限标志，再试试："

#. type: Fenced code block (shell)
#: docs/getting_started/first_steps.md:72
#, no-wrap
msgid "deno run --allow-net=example.com https://deno.land/std@$STD_VERSION/examples/curl.ts https://example.com\n"
msgstr ""
"deno run --allow-net=example.com https://deno.land/std@$STD_VERSION/examples/"
"curl.ts https://example.com\n"

#. type: Title ###
#: docs/getting_started/first_steps.md:76
#, no-wrap
msgid "Reading a file"
msgstr "读取文件"

#. type: Plain text
#: docs/getting_started/first_steps.md:81
msgid ""
"Deno also provides APIs which do not come from the web. These are all "
"contained in the `Deno` global. You can find documentation for these APIs on "
"[doc.deno.land](https://doc.deno.land/https/github.com/denoland/deno/"
"releases/latest/download/lib.deno.d.ts)."
msgstr ""
"Deno 还有与网络无关的 API，你可以通过 `Deno` 这个全局命名空间来访问它们，也可以查看这些 API 的文档，参见 [doc.deno."
"land](https://doc.deno.land/https/github.com/denoland/deno/releases/latest/"
"download/lib.deno.d.ts) 。"

#. type: Plain text
#: docs/getting_started/first_steps.md:84
msgid ""
"Filesystem APIs for example do not have a web standard form, so Deno "
"provides its own API."
msgstr "比如，网页标准中还没有 Filesystem API，因此 Deno 就提供了相应的 API。"

#. type: Plain text
#: docs/getting_started/first_steps.md:87
msgid ""
"In this program each command-line argument is assumed to be a filename, the "
"file is opened, and printed to stdout."
msgstr "下面的程序中，每个参数都是文件名，传入命令行，之后打开文件，并打印到 stout。"

#. type: Fenced code block (ts)
#: docs/getting_started/first_steps.md:88
#, no-wrap
msgid ""
"const filenames = Deno.args;\n"
"for (const filename of filenames) {\n"
"  const file = await Deno.open(filename);\n"
"  await Deno.copy(file, Deno.stdout);\n"
"  file.close();\n"
"}\n"
msgstr ""
"const filenames = Deno.args;\n"
"for (const filename of filenames) {\n"
"  const file = await Deno.open(filename);\n"
"  await Deno.copy(file, Deno.stdout);\n"
"  file.close();\n"
"}\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:101
msgid ""
"The `copy()` function here actually makes no more than the necessary "
"kernel→userspace→kernel copies. That is, the same memory from which data is "
"read from the file, is written to stdout. This illustrates a general design "
"goal for I/O streams in Deno."
msgstr ""
"Deno 中 I/O stream 的整体设计目标可以这么解释：其中，`copy()` 函数实现了 kernel→userspace→kernel "
"copies。换句话说，内存用于读取文件数据，也用于将数据写入到 stdout。"

#. type: Fenced code block (shell)
#: docs/getting_started/first_steps.md:104
#, no-wrap
msgid "deno run --allow-read https://deno.land/std@$STD_VERSION/examples/cat.ts /etc/passwd\n"
msgstr ""
"deno run --allow-read https://deno.land/std@$STD_VERSION/examples/cat.ts /"
"etc/passwd\n"

#. type: Title ###
#: docs/getting_started/first_steps.md:108
#, no-wrap
msgid "TCP server"
msgstr "TCP 服务器"

#. type: Plain text
#: docs/getting_started/first_steps.md:112
msgid ""
"This is an example of a server which accepts connections on port 8080, and "
"returns to the client anything it sends."
msgstr "以下示例中，该服务器监听 8080 端口，客户端发送什么，服务端就返回什么。"

#. type: Fenced code block (ts)
#: docs/getting_started/first_steps.md:113
#, no-wrap
msgid ""
"const hostname = \"0.0.0.0\";\n"
"const port = 8080;\n"
"const listener = Deno.listen({ hostname, port });\n"
"console.log(`Listening on ${hostname}:${port}`);\n"
"for await (const conn of listener) {\n"
"  Deno.copy(conn, conn);\n"
"}\n"
msgstr ""
"const hostname = \"0.0.0.0\";\n"
"const port = 8080;\n"
"const listener = Deno.listen({ hostname, port });\n"
"console.log(`Listening on ${hostname}:${port}`);\n"
"for await (const conn of listener) {\n"
"  Deno.copy(conn, conn);\n"
"}\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:125
msgid ""
"For security reasons, Deno does not allow programs to access the network "
"without explicit permission. To allow accessing the network, use a command-"
"line flag:"
msgstr "出于安全因素，如果没有显式授权，Deno 会禁止程序访问网络。因此，使用如下命令行标志来访问网络："

#. type: Fenced code block (shell)
#: docs/getting_started/first_steps.md:126
#, no-wrap
msgid "deno run --allow-net https://deno.land/std@$STD_VERSION/examples/echo_server.ts\n"
msgstr ""
"deno run --allow-net https://deno.land/std@$STD_VERSION/examples/echo_server."
"ts\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:131
msgid "To test it, try sending data to it with netcat:"
msgstr "试一试用 netcat 向该端口发送数据来做个测试："

#. type: Fenced code block (shell)
#: docs/getting_started/first_steps.md:132
#, no-wrap
msgid ""
"$ nc localhost 8080\n"
"hello world\n"
"hello world\n"
msgstr ""
"$ nc localhost 8080\n"
"hello world\n"
"hello world\n"

#. type: Plain text
#: docs/getting_started/first_steps.md:141
msgid ""
"Like the `cat.ts` example, the `copy()` function here also does not make "
"unnecessary memory copies. It receives a packet from the kernel and sends it "
"back, without further complexity."
msgstr ""
"和 `cat.ts` 示例一样，以上示例中 `copy()` 函数没有进行多余的内存拷贝，而是从内核接收数据包，再将其返回到内核，确保了逻辑的简化。"

#. type: Title ###
#: docs/getting_started/first_steps.md:142
#, no-wrap
msgid "More examples"
msgstr "更多示例"

#. type: Plain text
#: docs/getting_started/first_steps.md:144
msgid ""
"You can find more examples, like an HTTP file server, in the `Examples` "
"chapter."
msgstr "在`示例`章节，你可以查到更多示例，其中包括 HTTP 文件服务器。"
