# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: 2021-03-12 03:33+0000\n"
"Last-Translator: Weblate Admin <weblate.admin@example.com>\n"
"Language-Team: Chinese (Simplified) <http://weblate.example.com/projects/"
"deno-docs/typescript/zh_Hans/>\n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.3.2\n"

#. type: Title ##
#: docs/getting_started/typescript.md:1
#, no-wrap
msgid "Using TypeScript"
msgstr "使用 TypeScript"

#. type: Plain text
#: docs/getting_started/typescript.md:4
#, no-wrap
msgid "<!-- TODO(lucacasonato): text on 'just import .ts' -->\n"
msgstr "<!-- TODO(lucacasonato): text on 'just import .ts' -->\n"

#. type: Plain text
#: docs/getting_started/typescript.md:11
msgid ""
"Deno supports both JavaScript and TypeScript as first class languages at "
"runtime. This means it requires fully qualified module names, including the "
"extension (or a server providing the correct media type). In addition, Deno "
"has no \"magical\" module resolution. Instead, imported modules are "
"specified as files (including extensions) or fully qualified URL imports. "
"Typescript modules can be directly imported. E.g."
msgstr ""
"Deno 支持 JavaScript 和 TypeScript，要求使用完全限定（fully "
"qualified）模块名称，名称中要包括扩展名，指定的服务器也要给出正确的媒体类型。以下示例直接导入 TypeScript 模块："

#. type: Fenced code block (ts)
#: docs/getting_started/typescript.md:12
#, no-wrap
msgid ""
"import { Response } from \"https://deno.land/std@$STD_VERSION/http/server.ts\";\n"
"import { queue } from \"./collections.ts\";\n"
msgstr ""
"import { Response } from \"https://deno.land/std@$STD_VERSION/http/server."
"ts\";\n"
"import { queue } from \"./collections.ts\";\n"

#. type: Title ###
#: docs/getting_started/typescript.md:17
#, no-wrap
msgid "`--no-check` option"
msgstr "`--no-check` 标志"

#. type: Plain text
#: docs/getting_started/typescript.md:25
msgid ""
"When using `deno run`, `deno test`, `deno cache`, or `deno bundle` you can "
"specify the `--no-check` flag to disable TypeScript type checking. This can "
"significantly reduce the time that program startup takes. This can be very "
"useful when type checking is provided by your editor and you want startup "
"time to be as fast as possible (for example when restarting the program "
"automatically with a file watcher)."
msgstr ""
"你可以对命令如 `deno run`、`deno test`、`deno cache` 或 `deno bundle` 指定 `--no-check` "
"标志来关闭 TypeScript "
"的类型检查，这大大缩短了程序启动的时间。该标志可用于以下情景：编辑器有类型检查的功能，而文件监听器会自动重启程序，此时你想尽可能缩短程序启动时间。"

#. type: Plain text
#: docs/getting_started/typescript.md:39
msgid ""
"Because `--no-check` does not do TypeScript type checking we can not "
"automatically remove type only imports and exports as this would require "
"type information. For this purpose TypeScript provides the [`import type` "
"and `export type` syntax](https://www.typescriptlang.org/docs/handbook/"
"release-notes/typescript-3-8.html#type-only-imports-and-exports).  To export "
"a type in a different file use `export type { AnInterface } from \"./mod.ts"
"\";`. To import a type use `import type { AnInterface } from \"./mod.ts\";`. "
"You can check that you are using `import type` and `export type` where "
"necessary by setting the `isolatedModules` TypeScript compiler option to "
"`true`, and the `importsNotUsedAsValues` to `error`. You can see an example "
"`tsconfig.json` with this option [in the standard library](https://github."
"com/denoland/deno/blob/$CLI_VERSION/std/tsconfig_test.json).  These settings "
"will be enabled by default in the future. They are already the default in "
"Deno 1.4 or above when using `--unstable`."
msgstr ""
"有了类型信息才能自动删除 type only import 或 export，而 `--no-check` 标志关闭了 TypeScript "
"类型检查，因此无法进行该操作。为此，TypeScript 新增了 [`import type` 和 `export type` "
"语法](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8"
".html#type-only-imports-and-exports)。其中，导出 type：`export type { AnInterface } "
"from \"./mod.ts\";`；导入 type：`import type { AnInterface } from \"./mod.ts\";`。"
"你可以在 TypeScript option 中设置 `isolatedModules` 为 `true`，并设置 "
"`importsNotUsedAsValues` 为 `error`，这样就能确保使用了 `import type` 和 `export "
"type`。你可以从[标准库](https://github.com/denoland/deno/blob/$CLI_VERSION/std/"
"tsconfig_test.json)查看相关示例 `tsconfig.json`。此外，我们以后会将这些配置设为默认，而如果你使用了 "
"`--unstable` 标志，Deno 1.4 及以上版本就会默认启动这些配置。"

#. type: Plain text
#: docs/getting_started/typescript.md:43
msgid ""
"Because there is no type information when using `--no-check`, `const enum` "
"is not supported because it is type-directed. `--no-check` also does not "
"support the legacy `import =` and `export =` syntax."
msgstr ""
"因为 `--no-check` 标志会导致失去类型信息，所以就无法支持 `const enum`，同时也不支持过时语法 `import =` 和 `"
"export =`。"

#. type: Title ###
#: docs/getting_started/typescript.md:44
#, no-wrap
msgid "Using external type definitions"
msgstr "使用类型声明文件"

#. type: Plain text
#: docs/getting_started/typescript.md:49
msgid ""
"The out of the box TypeScript compiler though relies on both extension-less "
"modules and the Node.js module resolution logic to apply types to JavaScript "
"modules."
msgstr ""
"Deno 内置的 TypeScript 编译器依赖于无扩展名的模块和 Node.js 的模块解析算法来为 JavaScript 模块配置相应的类型声明。"

#. type: Plain text
#: docs/getting_started/typescript.md:52
msgid ""
"In order to bridge this gap, Deno supports three ways of referencing type "
"definition files without having to resort to \"magic\" resolution."
msgstr "为了能直接配置类型声明，Deno 支持以下三种方法来指定类型声明文件，而无需采用 Node.js 的模块解析算法。"

#. type: Title ####
#: docs/getting_started/typescript.md:53
#, no-wrap
msgid "Compiler hint"
msgstr "Compiler hint"

#. type: Plain text
#: docs/getting_started/typescript.md:63
msgid ""
"If you are importing a JavaScript module, and you know where the type "
"definition for that module is located, you can specify the type definition "
"at import. This takes the form of a compiler hint. Compiler hints inform "
"Deno the location of `.d.ts` files and the JavaScript code that is imported "
"that they relate to. The hint is `@deno-types` and when specified the value "
"will be used in the compiler instead of the JavaScript module. For example, "
"if you had `foo.js`, but you know that alongside of it was `foo.d.ts` which "
"was the types for the file, the code would look like this:"
msgstr ""
"如果你导入了 JavaScript 模块，也知道对应的类型声明文件路径，你就可以导入模块的同时指定类型声明文件，这种指定方式称为 compiler "
"hint，它标记为 `@deno-types`，值为编译器所用，用来提醒 Deno `.d.ts` 文件的路径以及对应导入的模块。以下示例演示了 `foo"
".js` 和对应的 `foo.d.ts`："

#. type: Fenced code block (ts)
#: docs/getting_started/typescript.md:64
#, no-wrap
msgid ""
"// @deno-types=\"./foo.d.ts\"\n"
"import * as foo from \"./foo.js\";\n"
msgstr ""
"// @deno-types=\"./foo.d.ts\"\n"
"import * as foo from \"./foo.js\";\n"

#. type: Plain text
#: docs/getting_started/typescript.md:72
msgid ""
"The value follows the same resolution logic as importing a module, meaning "
"the file needs to have an extension and is relative to the current module. "
"Remote specifiers are also allowed."
msgstr ""
"@deno-types 的值遵守 Deno 的模块解析算法，换句话说，类型声明文件也得添加扩展名，路径相对于当前模块。此外，类型声明文件也可以从云端载入。"

#. type: Plain text
#: docs/getting_started/typescript.md:78
msgid ""
"The hint affects the next `import` statement (or `export ... from` "
"statement)  where the value of the `@deno-types` will be substituted at "
"compile time instead of the specified module. Like in the above example, the "
"Deno compiler will load `./foo.d.ts` instead of `./foo.js`. Deno will still "
"load `./foo.js` when it runs the program."
msgstr ""
"Compiler hint 会影响相邻之下的 `import` 或 `export...from` 语句，即编译器会载入 `@deno-types` "
"的值，不载入语句指定的模块。如以上示例，Deno 编译器会载入 `./foo.d.ts`，不载入 `./foo.js`，不过 Deno 在运行时会载入 "
"`./foo.js`。"

#. type: Title ####
#: docs/getting_started/typescript.md:79
#, no-wrap
msgid "Triple-slash reference directive in JavaScript files"
msgstr "三斜线指令"

#. type: Plain text
#: docs/getting_started/typescript.md:87
msgid ""
"If you are hosting modules which you want to be consumed by Deno, and you "
"want to inform Deno about the location of the type definitions, you can "
"utilize a triple-slash directive in the actual code. For example, if you "
"have a JavaScript module and you would like to provide Deno with the "
"location of the type definition which happens to be alongside that file, "
"your JavaScript module named `foo.js` might look like this:"
msgstr ""
"你可以在源码中使用三斜线指令向 Deno 指出模块或类型声明文件的位置。例如，在 JavaScript 模块`foo.js`中添加类型声明文件的位置："

#. type: Fenced code block (js)
#: docs/getting_started/typescript.md:88
#, no-wrap
msgid ""
"/// <reference types=\"./foo.d.ts\" />\n"
"export const foo = \"foo\";\n"
msgstr ""
"/// <reference types=\"./foo.d.ts\" />\n"
"export const foo = \"foo\";\n"

#. type: Plain text
#: docs/getting_started/typescript.md:98
msgid ""
"Deno will see this, and the compiler will use `foo.d.ts` when type checking "
"the file, though `foo.js` will be loaded at runtime. The resolution of the "
"value of the directive follows the same resolution logic as importing a "
"module, meaning the file needs to have an extension and is relative to the "
"current file. Remote specifiers are also allowed."
msgstr ""
"虽然`foo.js`会在运行时载入，但编译器可以根据`foo.d.ts`来对`foo."
"js`做类型检查。指令内值的解析与模块导入相同，即值应表明扩展名，路径应相对于当前文件。此外，值也接受云端文件。"

#. type: Title ####
#: docs/getting_started/typescript.md:99
#, no-wrap
msgid "X-TypeScript-Types custom header"
msgstr "HTTP 头 X-TypeScript-Types"

#. type: Plain text
#: docs/getting_started/typescript.md:104
msgid ""
"If you are hosting modules which you want to be consumed by Deno, and you "
"want to inform Deno the location of the type definitions, you can use a "
"custom HTTP header of `X-TypeScript-Types` to inform Deno of the location of "
"that file."
msgstr "你可以用 HTTP 头`X-TypeScript-Types`向 Deno 指出模块或类型声明文件的位置。"

#. type: Plain text
#: docs/getting_started/typescript.md:109
msgid ""
"The header works in the same way as the triple-slash reference mentioned "
"above, it just means that the content of the JavaScript file itself does not "
"need to be modified, and the location of the type definitions can be "
"determined by the server itself."
msgstr "它和上文的三斜线指令一样，区别是你不用再更改 JavaScript 文件，类型声明文件的位置也会由服务器来决定。"

#. type: Plain text
#: docs/getting_started/typescript.md:111
#, no-wrap
msgid "**Not all type definitions are supported.**\n"
msgstr "**注意：尚未支持所有类型声明文件。**\n"

#. type: Plain text
#: docs/getting_started/typescript.md:119
msgid ""
"Deno will use the compiler hint to load the indicated `.d.ts` files, but "
"some `.d.ts` files contain unsupported features. Specifically, some `.d.ts` "
"files expect to be able to load or reference type definitions from other "
"packages using the module resolution logic. For example a type reference "
"directive to include `node`, expecting to resolve to some path like `./"
"node_modules/@types/node/index.d.ts`. Since this depends on non-relative "
"\"magical\" resolution, Deno cannot resolve this."
msgstr ""
"Deno 会用`compiler hint`来加载`.d.ts`文件，但是某些`.d.ts`文件存在 Deno 尚未支持的内容。具体来说，这些文件本来要按"
"照模块解析策略从类型声明包加载或引用类型定义，但这会失败。举个例子：在指定类型定义的值为`node`的情况下，按理说它会解析为`./"
"node_modules/@types/node/index.d.ts`，然而这种解析依赖于所谓的非相对自动解析，所以 Deno 无法成功解析路径。"

#. type: Plain text
#: docs/getting_started/typescript.md:121
#, no-wrap
msgid "**Why not use the triple-slash type reference in TypeScript files?**\n"
msgstr "**为什么不在 TypeScript 文件中使用三斜线指令？**\n"

#. type: Plain text
#: docs/getting_started/typescript.md:126
msgid ""
"The TypeScript compiler supports triple-slash directives, including a type "
"reference directive. If Deno used this, it would interfere with the behavior "
"of the TypeScript compiler. Deno only looks for the directive in JavaScript "
"(and JSX) files."
msgstr ""
"TypeScript 编译器支持用三斜线指令来引用类型定义，而 Deno 会与 TypeScript 编译器在该功能上产生冲突。因此，Deno 只支持在 "
"JavaScript 文件使用三斜线指令。"

#. type: Title ###
#: docs/getting_started/typescript.md:127
#, no-wrap
msgid "Custom TypeScript Compiler Options"
msgstr "配置 TypeScript 编译器"

#. type: Plain text
#: docs/getting_started/typescript.md:133
msgid ""
"In the Deno ecosystem, all strict flags are enabled in order to comply with "
"TypeScript's ideal of being `strict` by default. However, in order to "
"provide a way to support customization a configuration file such as "
"`tsconfig.json` might be provided to Deno on program execution."
msgstr ""
"Deno 启用了 strict 模式来遵守 TypeScript "
"的和合适标准：默认`strict`。然而，如果你想自定义配置，你可以在程序执行时将像`tsconfig.json`这样的配置文件传递给 Deno。"

#. type: Plain text
#: docs/getting_started/typescript.md:136
msgid ""
"You need to explicitly tell Deno where to look for this configuration by "
"setting the `-c` (or `--config`) argument when executing your application."
msgstr "执行程序时，你得用`-c`或`--config`来向 Deno 显式指出配置文件的位置。"

#. type: Fenced code block (shell)
#: docs/getting_started/typescript.md:137
#, no-wrap
msgid "deno run -c tsconfig.json mod.ts\n"
msgstr "deno run -c tsconfig.json mod.ts\n"

#. type: Plain text
#: docs/getting_started/typescript.md:142
msgid ""
"Following are the currently allowed settings and their default values in "
"Deno:"
msgstr "Deno 目前支持以下配置，默认值如下："

#. type: Fenced code block (json)
#: docs/getting_started/typescript.md:143
#, no-wrap
msgid ""
"{\n"
"  \"compilerOptions\": {\n"
"    \"allowJs\": false,\n"
"    \"allowUmdGlobalAccess\": false,\n"
"    \"allowUnreachableCode\": false,\n"
"    \"allowUnusedLabels\": false,\n"
"    \"alwaysStrict\": true,\n"
"    \"assumeChangesOnlyAffectDirectDependencies\": false,\n"
"    \"checkJs\": false,\n"
"    \"disableSizeLimit\": false,\n"
"    \"generateCpuProfile\": \"profile.cpuprofile\",\n"
"    \"jsx\": \"react\",\n"
"    \"jsxFactory\": \"React.createElement\",\n"
"    \"jsxFragmentFactory\": \"React.Fragment\",\n"
"    \"lib\": [],\n"
"    \"noFallthroughCasesInSwitch\": false,\n"
"    \"noImplicitAny\": true,\n"
"    \"noImplicitReturns\": true,\n"
"    \"noImplicitThis\": true,\n"
"    \"noImplicitUseStrict\": false,\n"
"    \"noStrictGenericChecks\": false,\n"
"    \"noUnusedLocals\": false,\n"
"    \"noUnusedParameters\": false,\n"
"    \"preserveConstEnums\": false,\n"
"    \"removeComments\": false,\n"
"    \"resolveJsonModule\": true,\n"
"    \"strict\": true,\n"
"    \"strictBindCallApply\": true,\n"
"    \"strictFunctionTypes\": true,\n"
"    \"strictNullChecks\": true,\n"
"    \"strictPropertyInitialization\": true,\n"
"    \"suppressExcessPropertyErrors\": false,\n"
"    \"suppressImplicitAnyIndexErrors\": false,\n"
"    \"useDefineForClassFields\": false\n"
"  }\n"
"}\n"
msgstr ""
"{\n"
"  \"compilerOptions\": {\n"
"    \"allowJs\": false,\n"
"    \"allowUmdGlobalAccess\": false,\n"
"    \"allowUnreachableCode\": false,\n"
"    \"allowUnusedLabels\": false,\n"
"    \"alwaysStrict\": true,\n"
"    \"assumeChangesOnlyAffectDirectDependencies\": false,\n"
"    \"checkJs\": false,\n"
"    \"disableSizeLimit\": false,\n"
"    \"generateCpuProfile\": \"profile.cpuprofile\",\n"
"    \"jsx\": \"react\",\n"
"    \"jsxFactory\": \"React.createElement\",\n"
"    \"jsxFragmentFactory\": \"React.Fragment\",\n"
"    \"lib\": [],\n"
"    \"noFallthroughCasesInSwitch\": false,\n"
"    \"noImplicitAny\": true,\n"
"    \"noImplicitReturns\": true,\n"
"    \"noImplicitThis\": true,\n"
"    \"noImplicitUseStrict\": false,\n"
"    \"noStrictGenericChecks\": false,\n"
"    \"noUnusedLocals\": false,\n"
"    \"noUnusedParameters\": false,\n"
"    \"preserveConstEnums\": false,\n"
"    \"removeComments\": false,\n"
"    \"resolveJsonModule\": true,\n"
"    \"strict\": true,\n"
"    \"strictBindCallApply\": true,\n"
"    \"strictFunctionTypes\": true,\n"
"    \"strictNullChecks\": true,\n"
"    \"strictPropertyInitialization\": true,\n"
"    \"suppressExcessPropertyErrors\": false,\n"
"    \"suppressImplicitAnyIndexErrors\": false,\n"
"    \"useDefineForClassFields\": false\n"
"  }\n"
"}\n"

#. type: Plain text
#: docs/getting_started/typescript.md:184
msgid ""
"For documentation on allowed values and use cases please visit the "
"[typescript docs](https://www.typescriptlang.org/docs/handbook/compiler-"
"options.html)."
msgstr ""
"前往[typescript docx](https://www.typescriptlang.org/docs/handbook/compiler-"
"options.html)去阅读相关文档和用例。"

#. type: Plain text
#: docs/getting_started/typescript.md:186
#, no-wrap
msgid ""
"**Note**: Any options not listed above are either not supported by Deno or are\n"
"listed as deprecated/experimental in the TypeScript documentation.\n"
msgstr ""
"**注意**：上文未列出的选项要么 Deno 还尚未支持，要么在 TypeScript 文档中列为 deprecated 或 experimental。"
"\n"
