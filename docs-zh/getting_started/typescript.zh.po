# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-11-25 21:33+0800\n"
"PO-Revision-Date: 2020-11-30 15:48+0000\n"
"Last-Translator: Weblate Admin <weblate.admin@example.com>\n"
"Language-Team: Chinese (Simplified) <http://weblate.example.com/projects/"
"deno-docs/typescript/zh_Hans/>\n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.3.2\n"

#. type: Title ##
#: docs/getting_started/typescript.md:1
#, no-wrap
msgid "Using TypeScript"
msgstr "使用 TypeScript"

#. type: Plain text
#: docs/getting_started/typescript.md:4
#, fuzzy, no-wrap
msgid "<!-- TODO(lucacasonato): text on 'just import .ts' -->\n"
msgstr "<!-- TODO(lucacasonato): text on 'just import .ts' -->\n"

#. type: Plain text
#: docs/getting_started/typescript.md:11
msgid ""
"Deno supports both JavaScript and TypeScript as first class languages at "
"runtime. This means it requires fully qualified module names, including the "
"extension (or a server providing the correct media type). In addition, Deno "
"has no \"magical\" module resolution. Instead, imported modules are "
"specified as files (including extensions) or fully qualified URL imports. "
"Typescript modules can be directly imported. E.g."
msgstr ""

#. type: Fenced code block (ts)
#: docs/getting_started/typescript.md:12
#, no-wrap
msgid ""
"import { Response } from \"https://deno.land/std@$STD_VERSION/http/server.ts\";\n"
"import { queue } from \"./collections.ts\";\n"
msgstr ""

#. type: Title ###
#: docs/getting_started/typescript.md:17
#, no-wrap
msgid "`--no-check` option"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:25
msgid ""
"When using `deno run`, `deno test`, `deno cache`, or `deno bundle` you can "
"specify the `--no-check` flag to disable TypeScript type checking. This can "
"significantly reduce the time that program startup takes. This can be very "
"useful when type checking is provided by your editor and you want startup "
"time to be as fast as possible (for example when restarting the program "
"automatically with a file watcher)."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:39
msgid ""
"Because `--no-check` does not do TypeScript type checking we can not "
"automatically remove type only imports and exports as this would require "
"type information. For this purpose TypeScript provides the [`import type` "
"and `export type` syntax](https://www.typescriptlang.org/docs/handbook/"
"release-notes/typescript-3-8.html#type-only-imports-and-exports).  To export "
"a type in a different file use `export type { AnInterface } from \"./mod.ts"
"\";`. To import a type use `import type { AnInterface } from \"./mod.ts\";`. "
"You can check that you are using `import type` and `export type` where "
"necessary by setting the `isolatedModules` TypeScript compiler option to "
"`true`, and the `importsNotUsedAsValues` to `error`. You can see an example "
"`tsconfig.json` with this option [in the standard library](https://github."
"com/denoland/deno/blob/$CLI_VERSION/std/tsconfig_test.json).  These settings "
"will be enabled by default in the future. They are already the default in "
"Deno 1.4 or above when using `--unstable`."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:43
msgid ""
"Because there is no type information when using `--no-check`, `const enum` "
"is not supported because it is type-directed. `--no-check` also does not "
"support the legacy `import =` and `export =` syntax."
msgstr ""

#. type: Title ###
#: docs/getting_started/typescript.md:44
#, no-wrap
msgid "Using external type definitions"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:49
msgid ""
"The out of the box TypeScript compiler though relies on both extension-less "
"modules and the Node.js module resolution logic to apply types to JavaScript "
"modules."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:52
msgid ""
"In order to bridge this gap, Deno supports three ways of referencing type "
"definition files without having to resort to \"magic\" resolution."
msgstr ""

#. type: Title ####
#: docs/getting_started/typescript.md:53
#, no-wrap
msgid "Compiler hint"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:63
msgid ""
"If you are importing a JavaScript module, and you know where the type "
"definition for that module is located, you can specify the type definition "
"at import. This takes the form of a compiler hint. Compiler hints inform "
"Deno the location of `.d.ts` files and the JavaScript code that is imported "
"that they relate to. The hint is `@deno-types` and when specified the value "
"will be used in the compiler instead of the JavaScript module. For example, "
"if you had `foo.js`, but you know that alongside of it was `foo.d.ts` which "
"was the types for the file, the code would look like this:"
msgstr ""

#. type: Fenced code block (ts)
#: docs/getting_started/typescript.md:64
#, no-wrap
msgid ""
"// @deno-types=\"./foo.d.ts\"\n"
"import * as foo from \"./foo.js\";\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:72
msgid ""
"The value follows the same resolution logic as importing a module, meaning "
"the file needs to have an extension and is relative to the current module. "
"Remote specifiers are also allowed."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:78
msgid ""
"The hint affects the next `import` statement (or `export ... from` "
"statement)  where the value of the `@deno-types` will be substituted at "
"compile time instead of the specified module. Like in the above example, the "
"Deno compiler will load `./foo.d.ts` instead of `./foo.js`. Deno will still "
"load `./foo.js` when it runs the program."
msgstr ""

#. type: Title ####
#: docs/getting_started/typescript.md:79
#, no-wrap
msgid "Triple-slash reference directive in JavaScript files"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:87
msgid ""
"If you are hosting modules which you want to be consumed by Deno, and you "
"want to inform Deno about the location of the type definitions, you can "
"utilize a triple-slash directive in the actual code. For example, if you "
"have a JavaScript module and you would like to provide Deno with the "
"location of the type definition which happens to be alongside that file, "
"your JavaScript module named `foo.js` might look like this:"
msgstr ""

#. type: Fenced code block (js)
#: docs/getting_started/typescript.md:88
#, no-wrap
msgid ""
"/// <reference types=\"./foo.d.ts\" />\n"
"export const foo = \"foo\";\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:98
msgid ""
"Deno will see this, and the compiler will use `foo.d.ts` when type checking "
"the file, though `foo.js` will be loaded at runtime. The resolution of the "
"value of the directive follows the same resolution logic as importing a "
"module, meaning the file needs to have an extension and is relative to the "
"current file. Remote specifiers are also allowed."
msgstr ""

#. type: Title ####
#: docs/getting_started/typescript.md:99
#, no-wrap
msgid "X-TypeScript-Types custom header"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:104
msgid ""
"If you are hosting modules which you want to be consumed by Deno, and you "
"want to inform Deno the location of the type definitions, you can use a "
"custom HTTP header of `X-TypeScript-Types` to inform Deno of the location of "
"that file."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:109
msgid ""
"The header works in the same way as the triple-slash reference mentioned "
"above, it just means that the content of the JavaScript file itself does not "
"need to be modified, and the location of the type definitions can be "
"determined by the server itself."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:111
#, no-wrap
msgid "**Not all type definitions are supported.**\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:119
msgid ""
"Deno will use the compiler hint to load the indicated `.d.ts` files, but "
"some `.d.ts` files contain unsupported features. Specifically, some `.d.ts` "
"files expect to be able to load or reference type definitions from other "
"packages using the module resolution logic. For example a type reference "
"directive to include `node`, expecting to resolve to some path like `./"
"node_modules/@types/node/index.d.ts`. Since this depends on non-relative "
"\"magical\" resolution, Deno cannot resolve this."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:121
#, no-wrap
msgid "**Why not use the triple-slash type reference in TypeScript files?**\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:126
msgid ""
"The TypeScript compiler supports triple-slash directives, including a type "
"reference directive. If Deno used this, it would interfere with the behavior "
"of the TypeScript compiler. Deno only looks for the directive in JavaScript "
"(and JSX) files."
msgstr ""

#. type: Title ###
#: docs/getting_started/typescript.md:127
#, no-wrap
msgid "Custom TypeScript Compiler Options"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:133
msgid ""
"In the Deno ecosystem, all strict flags are enabled in order to comply with "
"TypeScript's ideal of being `strict` by default. However, in order to "
"provide a way to support customization a configuration file such as "
"`tsconfig.json` might be provided to Deno on program execution."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:136
msgid ""
"You need to explicitly tell Deno where to look for this configuration by "
"setting the `-c` (or `--config`) argument when executing your application."
msgstr ""

#. type: Fenced code block (shell)
#: docs/getting_started/typescript.md:137
#, no-wrap
msgid "deno run -c tsconfig.json mod.ts\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:142
msgid ""
"Following are the currently allowed settings and their default values in "
"Deno:"
msgstr ""

#. type: Fenced code block (json)
#: docs/getting_started/typescript.md:143
#, no-wrap
msgid ""
"{\n"
"  \"compilerOptions\": {\n"
"    \"allowJs\": false,\n"
"    \"allowUmdGlobalAccess\": false,\n"
"    \"allowUnreachableCode\": false,\n"
"    \"allowUnusedLabels\": false,\n"
"    \"alwaysStrict\": true,\n"
"    \"assumeChangesOnlyAffectDirectDependencies\": false,\n"
"    \"checkJs\": false,\n"
"    \"disableSizeLimit\": false,\n"
"    \"generateCpuProfile\": \"profile.cpuprofile\",\n"
"    \"jsx\": \"react\",\n"
"    \"jsxFactory\": \"React.createElement\",\n"
"    \"jsxFragmentFactory\": \"React.Fragment\",\n"
"    \"lib\": [],\n"
"    \"noFallthroughCasesInSwitch\": false,\n"
"    \"noImplicitAny\": true,\n"
"    \"noImplicitReturns\": true,\n"
"    \"noImplicitThis\": true,\n"
"    \"noImplicitUseStrict\": false,\n"
"    \"noStrictGenericChecks\": false,\n"
"    \"noUnusedLocals\": false,\n"
"    \"noUnusedParameters\": false,\n"
"    \"preserveConstEnums\": false,\n"
"    \"removeComments\": false,\n"
"    \"resolveJsonModule\": true,\n"
"    \"strict\": true,\n"
"    \"strictBindCallApply\": true,\n"
"    \"strictFunctionTypes\": true,\n"
"    \"strictNullChecks\": true,\n"
"    \"strictPropertyInitialization\": true,\n"
"    \"suppressExcessPropertyErrors\": false,\n"
"    \"suppressImplicitAnyIndexErrors\": false,\n"
"    \"useDefineForClassFields\": false\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:184
msgid ""
"For documentation on allowed values and use cases please visit the "
"[typescript docs](https://www.typescriptlang.org/docs/handbook/compiler-"
"options.html)."
msgstr ""

#. type: Plain text
#: docs/getting_started/typescript.md:186
#, no-wrap
msgid ""
"**Note**: Any options not listed above are either not supported by Deno or are\n"
"listed as deprecated/experimental in the TypeScript documentation.\n"
msgstr ""
